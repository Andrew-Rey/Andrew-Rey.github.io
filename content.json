{"meta":{"title":"Andrew-Rey","subtitle":"醉后不知天在水，满船清梦压星河","description":"","author":null,"url":"https://Andrew-Rey.github.io","root":"/"},"pages":[{"title":"","date":"2023-11-15T03:21:23.859Z","updated":"2023-11-15T03:21:23.859Z","comments":true,"path":"css/prism.css","permalink":"https://andrew-rey.github.io/css/prism.css","excerpt":"","text":"/** * prism.js default theme for JavaScript, CSS and HTML * Based on dabblet (http://dabblet.com) * @author Lea Verou */ code[class*=\"language-\"], pre[class*=\"language-\"] { color: black; background: none; text-shadow: 0 1px white; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; word-wrap: normal; line-height: 1.5; -moz-tab-size: 4; -o-tab-size: 4; tab-size: 4; -webkit-hyphens: none; -moz-hyphens: none; -ms-hyphens: none; hyphens: none; } pre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection, code[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection { text-shadow: none; background: #b3d4fc; } pre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection, code[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection { text-shadow: none; background: #b3d4fc; } @media print { code[class*=\"language-\"], pre[class*=\"language-\"] { text-shadow: none; } } /* Code blocks */ pre[class*=\"language-\"] { padding: 1em; margin: .5em 0; overflow: auto; } :not(pre) > code[class*=\"language-\"], pre[class*=\"language-\"] { background: #f5f2f0; } /* Inline code */ :not(pre) > code[class*=\"language-\"] { padding: .1em; border-radius: .3em; white-space: normal; } .token.comment, .token.prolog, .token.doctype, .token.cdata { color: slategray; } .token.punctuation { color: #999; } .token.namespace { opacity: .7; } .token.property, .token.tag, .token.boolean, .token.number, .token.constant, .token.symbol, .token.deleted { color: #905; } .token.selector, .token.attr-name, .token.string, .token.char, .token.builtin, .token.inserted { color: #690; } .token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string { color: #9a6e3a; /* This background color was intended by the author of this theme. */ background: hsla(0, 0%, 100%, .5); } .token.atrule, .token.attr-value, .token.keyword { color: #07a; } .token.function, .token.class-name { color: #DD4A68; } .token.regex, .token.important, .token.variable { color: #e90; } .token.important, .token.bold { font-weight: bold; } .token.italic { font-style: italic; } .token.entity { cursor: help; }"},{"title":"categories","date":"2023-10-08T07:45:01.957Z","updated":"2023-10-08T07:45:01.957Z","comments":true,"path":"categories/index.html","permalink":"https://andrew-rey.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-15T03:32:59.319Z","updated":"2023-11-15T03:32:59.319Z","comments":true,"path":"css/site.css","permalink":"https://andrew-rey.github.io/css/site.css","excerpt":"","text":"p code, li code, h1 code, h2 code, h3 code { display: inline-block; white-space: no-wrap; background: #f6f6f6; font-size: .9em; line-height: 1.5em; color: #464646; border: 1px solid #eeeeee; -webkit-border-radius: 0.4em; -moz-border-radius: 0.4em; -ms-border-radius: 0.4em; -o-border-radius: 0.4em; border-radius: 0.4em; padding: 0 .3em; margin: -1px 0; } .article-content a { color: #21afd3; } .article-content a:hover { color: #ff6557; text-decoration: underline; } @font-face { font-family: 'CaskaydiaCove Nerd Font'; src: url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.eot'); src: url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.eot?#iefix') format('embedded-opentype'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.woff2') format('woff2'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.woff') format('woff'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.ttf') format('truetype'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.svg#CaskaydiaCoveNerdFontComplete-') format('svg'); font-weight: normal; font-style: normal; font-display: swap; } code[class*=\"language-\"], pre[class*=\"language-\"] { border-radius: .6em; font-family: 'CaskaydiaCove Nerd Font' !important; } code { font-family: 'CaskaydiaCove Nerd Font' !important; } .article-content { font-family: 'CaskaydiaCove Nerd Font'; } .original { margin: 2em 0 0; padding: .5em 1em; border-left: 3px solid #fbbc97; background-color: #f9f9f9; font-size: 14px; list-style: none; } .footnote-item p { line-height: 0; } .article-content li { line-height: 2em; }"},{"title":"二十岁的自传","date":"2023-10-31T17:44:21.025Z","updated":"2023-10-31T17:44:21.025Z","comments":true,"path":"about/index.html","permalink":"https://andrew-rey.github.io/about/index.html","excerpt":"","text":"我在十九岁最后两天的时候给自己写了点东西，当时在教室，周围是考研的学长学姐。 现在是二十岁的我，自传嘛，随便写写，但是并不代表对自己的亵渎。 写点什么呢。 弱冠年，本科在读。 二零年毕业于郴州市一中。 高考延期，现在仍然记得高考时的座位靠窗，那天很热。 疫情在高三开始， 高二的回忆是关于粉橙色的夕阳和理综数学， 高一开始当了纪律委员， 夏令营的天很蓝。 初三的风，初二的她，初一的混乱和美术。 县城小学四年，与父骑车游玩， 浑身是泥，不汗不归。 一二年级在积木中度过。 宅居校内，父母为师， 门前青草针叶衫，夜晚是母亲扇风的手。 再往前，记忆只在照片中凝固。 就这样，平常地活着，安然无恙地活着。 当时怎知宇宙之大，也从不担忧人生几何； 现在知道了宇宙的度量，明白了人生几何， 目睹了活着，和死亡，目睹了一个时代的结束。 人体维护的一切，只是将熵增的速率变缓。 但那又怎样。 我欣然接受。 我已经学会了走路，奔跑；说话，呐喊；回忆，思考；见面，告别。 并且我仍然会 奔跑着，呐喊着，思考着，以及告别着。 但无论怎样，请别忘了： 走路，说话，回忆和见面， 也是你的本能。"},{"title":"tags","date":"2023-10-08T07:45:01.958Z","updated":"2023-10-08T07:45:01.958Z","comments":true,"path":"tags/index.html","permalink":"https://andrew-rey.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HPC | Theory Backgroud","slug":"HPC/theory","date":"2024-04-11T04:38:19.000Z","updated":"2024-04-11T14:54:30.258Z","comments":true,"path":"2024/04/11/HPC/theory/","link":"","permalink":"https://andrew-rey.github.io/2024/04/11/HPC/theory/","excerpt":"","text":"首先介绍并行随机访问机器（PRAM）模型是抽象的共享内存模型，其忽略了现实计算机中的开销，但可以帮助设计一些并行算法。其次是对于分布式内存模型，会介绍一些基础图论知识。接着介绍并行程序中的两大定律：Amdahl定律和Gustafson定律，用于推断并行程序加速比能达到的上限。最后以并行算法设计的Foster方法论结束。 并行随机访问机器模型 事实上，PRAM (Parallel Random Access Machine) 模型架构十分简单，相比于操作系统课上的一个处理器而言，PRAM拥有多个独立的处理器，每个处理器分3个阶段执行一个指令周期： 读阶段：每个处理器并发地从各自的共享内存中读取单条数据并保存到本地的寄存器中。 计算阶段：每个处理器对本地数据执行一个基本操作，并将结果存储在寄存器中。 写阶段：每个处理器并发写一条数据到共享内存中。 PRAM中的通信通过处理器在共享内存中的读写实现，该类型的内存能够以统一的方式访问，即每个处理器对内存中任意位置的访问都使用统一的常数时间实现，这和现实计算机很不一样（访问大规模共享内存时耗费的时间不一致）。 PRAM的变体 在相同的指令中期中，多个处理器读写多个共享内存单元会发生冲突，为解决冲突，出现了如下的几种PRAM变体：ER (exclusive read)，EW (exclusive write)，CR (concurrent read)，CW (concurrent write)。常见的组合有三种： EREW：独占读、独占写。任意周期内，不允许多个处理器在相同的共享内存单元中进行读写。 CREW：并发读、独占写。 CRCW：并发读、并发写。对于并发写入，有常见的数据保留形式： Priority: 处理器本身的优先级决定 Arbitrary: 随机选取一个处理器的值写入 Common: 若所有的值都相等则写入，否则内存位置的值不变 Combining: 通过某种运算组合所有的冲突值再写入 PRAM上的前缀和算法 问题描述：给定 个数据，和一个该数据的二元运算符，假设为加法运算。在一台拥有 个计算结点的PRAM上，并行计算前缀和。 其中数据已经存储在了共享内存 A 中，每个计算结点的寄存器用 reg 表示，目标是设计一个开销最优化的PRAM算法。 串行分析：使用一个计算结点求解前缀和问题 1for (int i = 1; i &lt; n; i += 1) A[i] += A[i-1]; 计算复杂度为 。 并行分析：使用 个计算结点并行求解前缀和问题 当 时，计算结点的数量和数据量相等，每个计算结点上处理一个数据。 可以使用分治递归的方式，将计算结点逐一合并。 1234567891011121314151617//-- 算法 1 --//// load data for every node@parallelfor (int i = 0; i &lt; p; i += 1) { reg[i] = A[i];}// total iteration num, merge by 2for (int i = 0; i &lt; ceil(log(p)); i += 1) { // the left nodes have been calculated int node_start_idx = pow(2, i); @parallel for (int j = node_start_idx; j &lt; p; j += 1) { reg[j] += A[j - node_start_idx]; A[j] = reg[j]; }} 总体的计算结构类似于二叉树：每一个结点都与左边相邻结点进行计算前缀和，第 次迭代中，每 个结点视为一个 merge 的结点， 因此一共需要 次递归，即花费的时间为 ， 开销为 ，是对数线性的。 如果需要继续减小开销 ，则要么减小 ，要么减小 ，降低运行时间比较困难，因此选择减少计算结点的数量 ，即 方法如下 我们有 个计算结点，先将 个数据均分到每个计算结点上，每个结点有 个数据 每个计算结点对本地内存的数据求解前缀和，花费的时间为 每个结点返回本地前缀和的最后一位结果，得到一共 个数据 对上述 个数据执行算法1，花费的时间为 ，计算完成后依然得到长度为 的前缀和 A_p 将第4步得到的前缀和 A_p[j]，依次加到 reg[j+1] 上，A_p 的最后一位不用加，由于每个结点有 个数据，因此花费的时间为 综上所述，整个算法的时间为 ，开销为 ， 当 时，计算时间为对数，且开销为线性的。 123456789101112131415161718192021222324252627282930313233//-- 算法 2 --//// stage 1-3// calculate prefix sum for every node// each node contains k = n/p = log(n) datak = n/p = log(n)@parallelfor (int i = 0; i &lt; p; i += 1) { for (int j = 1; j &lt; k; j += 1) { // data index: i * num + offsets A[i*k+j] += A[i*k+j-1] }}// stage 4// calculate prefix sum for rightmost values of every nodefor (int i = 0; i &lt; log(p); i += 1) { int node_start_idx = pow(2, i); @parallel for (int j = node_start_idx + 1; j &lt; p; j += 1) { A[j*k-1] += A[(j - node_start_idx)*k-1] }}// stage 5// add results@parallelfor (int i = 1; i &lt; p; i += 1) { // ignore the last value for (int j = 0; j &lt; k-1; j += 1) { A[i*k+j] += A[i*k-1] }} PRAM上的稀疏矩阵压缩算法 稀疏矩阵压缩算法可以利用前缀和算法。 问题描述：稀疏数组 A 中多个元素为 ，希望能通过并行算法压缩为非零数组 V 和对应的位置数组 C。 构造和 A 等长的临时数组 temp，其中若 temp[i] = 1 if A[i]!=0 else temp[i]=0， 将数组 A 和临时数组 temp 均分到 个计算结点上，并行生成临时数组和计算临时数组的前缀和 求完前缀和的临时数组目前可以作为稀疏数组的 地址列表，接下来根据临时数组，并行索引 A 中对应地址，得到非零值和位置，写入 V,C 即可 分析： 网络拓扑 互联网络的结点可能是交换机或处理器。几个概念： 度(degree)：网络的度表示所有结点中邻居数目的最大值 对分宽度(bw)：将网络分为二分图，两个分图间边的最小值 直径(diam)：任意两个结点之间全部最短路径的最大值 在设计互联网络时，经常关注以下 理想属性： 常数度：网络的度是常数，即与网络的规模无关。这个属性允许网络扩大到更大的规模而无需增加过多的连接数 小直径：可以支持任意进程之间的高效通信 高对分宽度：对分宽度越低，大量聚合的通信操作会变得更慢，它隐含的是网络的内部带宽 经典网络拓扑结构各属性的阶： topology degree diam bw 线性排列 2D网面/环面 3D网面/环面 二叉树 超立方体","categories":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/categories/HPC/"}],"tags":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/tags/HPC/"}],"author":"Andrew-Rey"},{"title":"HPC | Introduction to Parallel Computation","slug":"HPC/intro","date":"2024-04-08T16:04:32.000Z","updated":"2024-04-11T14:56:50.579Z","comments":true,"path":"2024/04/09/HPC/intro/","link":"","permalink":"https://andrew-rey.github.io/2024/04/09/HPC/intro/","excerpt":"Parallel Programming: Concepts and Pracitce - Chapter 1","text":"Parallel Programming: Concepts and Pracitce - Chapter 1 概念 加速比 Speedup：衡量一个并行算法比串行算法快多少的指标。即使用单个处理器运行程序所花费的时间 与使用 个处理器运行程序所花费的时间 之比 通常我们希望得到的加速比为线性加速比，即用 个处理器去运行程序，最大的加速比为 效率 Efficiency：定义为加速比和处理器数目之比，衡量了平均一个处理器带来的加速比。当效率为 时，此时为线性加速比 可扩展性 Scalability：分为强可扩展性和弱可扩展性。 强可扩展性 Strong Scalability：测量效率时仅改变处理器的数目，输入数据的规模保持不变 弱可扩展性 Weak Scalability：处理器的数目随着输入数据规模共同变化（处理器数目翻倍时，测量效率时把数据规模也翻倍） 计算通信比 Computation-to-communication Ratio：定义为计算花费的时间和处理器间处理消息通信花费的时间之比。 分布式内存系统：每个计算单元只能访问自己的本地内存，如果需要访问其它单元，需要通过一个显式的通信步骤（例如通信网络）实现。 共享式内存系统：所有计算单元共享内存，除此之外，自己本身也有更小的内存（分级缓存）。 并行程序设计时需要考虑划分（数据并行、任务并行、模型并行）、通信、同步和负载平衡等。 求和的例子 现在我们进行一组数据的加法求和操作，其中数据量为 ，处理器数量为 。设 为一次加法操作所需要的时长， 为一批数据的通信时长。则 数据分发次数： 每个处理器本地求和： 每个处理器将结果传递给一个处理器（数据收集）： 中间结果求和： 总的求和运行时长为 其加速比为 对于固定的 ，加速比只与计算通信比 有关，并且有 因此在固定数据规模和处理器数量时，要提高加速比，需要降低计算通信比。同时，加速比也可以是处理器数量的函数： 令偏导为 ，解出最值条件 综上所述，有如下规律： 当数据规模固定时，加速比依赖于采用的计算单元的数目和计算通信比 通常情况下，加速比随着计算单元的增加达到局部最大，但使用更多计算单元时，加速比会降低 最优的加速比依赖于计算通信比，通信时长占比越大，使用的计算单元数目应该越少 前缀和的例子 前缀和问题：现有 个数据和 个计算结点 输入：一个二元可结合运算符 ； 个待运算的数据 输出： 个数据 ，其中对于 由于计算 需要依赖 ，在循环分析时带来了一定的困难，但该问题依然有并行的方式。 数据划分：使用 分治 策略，将 个数据按顺序均分为 份，分别分给 个计算结点，每个结点计算本地内存的前缀和，花费的时间为 数据归并：递归 合并相邻的结点数据，即左边结点将前缀和的 最后一个结果 返回，传递给右边结点，右边结点接收左边的前缀和，并将其与自己结点结果求和 所有线程将结果返回，计算完成 perfix sum 前缀和问题将在后续进行更加详细的讨论。","categories":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/categories/HPC/"}],"tags":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/tags/HPC/"}],"author":"Andrew-Rey"},{"title":"Compiler | Polyhedral Compilation-1","slug":"Compiler/poly_intro","date":"2024-04-08T16:00:33.000Z","updated":"2024-04-11T10:53:33.029Z","comments":true,"path":"2024/04/09/Compiler/poly_intro/","link":"","permalink":"https://andrew-rey.github.io/2024/04/09/Compiler/poly_intro/","excerpt":"","text":"","categories":[{"name":"Compiler","slug":"Compiler","permalink":"https://andrew-rey.github.io/categories/Compiler/"}],"tags":[{"name":"Compiler","slug":"Compiler","permalink":"https://andrew-rey.github.io/tags/Compiler/"}],"author":"Andrew-Rey"}],"categories":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/categories/HPC/"},{"name":"Compiler","slug":"Compiler","permalink":"https://andrew-rey.github.io/categories/Compiler/"}],"tags":[{"name":"HPC","slug":"HPC","permalink":"https://andrew-rey.github.io/tags/HPC/"},{"name":"Compiler","slug":"Compiler","permalink":"https://andrew-rey.github.io/tags/Compiler/"}]}