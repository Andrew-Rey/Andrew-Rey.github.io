{"meta":{"title":"Andrew-Rey","subtitle":"醉后不知天在水，满船清梦压星河","description":"","author":null,"url":"https://Andrew-Rey.github.io","root":"/"},"pages":[{"title":"categories","date":"2023-01-05T16:04:57.748Z","updated":"2023-01-05T16:04:57.748Z","comments":true,"path":"categories/index.html","permalink":"https://andrew-rey.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-01-05T16:04:38.508Z","updated":"2023-01-05T16:04:38.508Z","comments":true,"path":"tags/index.html","permalink":"https://andrew-rey.github.io/tags/index.html","excerpt":"","text":""},{"title":"二十岁的自传","date":"2022-11-23T11:12:45.978Z","updated":"2022-11-23T11:12:45.978Z","comments":true,"path":"about/index.html","permalink":"https://andrew-rey.github.io/about/index.html","excerpt":"","text":"我在十九岁最后两天的时候给自己写了点东西，当时在教室，周围是考研的学长学姐。 现在是二十岁的我，自传嘛，随便写写，但是并不代表对自己的亵渎。 写点什么呢。 弱冠年，本科在读。 二零年毕业于郴州市一中。 高考延期，现在仍然记得高考时的座位靠窗，那天很热。 疫情在高三开始， 高二的回忆是关于粉橙色的夕阳和理综数学， 高一开始当了纪律委员， 夏令营的天很蓝。 初三的风，初二的她，初一的混乱和美术。 县城小学四年，与父骑车游玩， 浑身是泥，不汗不归。 一二年级在积木中度过。 宅居校内，父母为师， 门前青草针叶衫，夜晚是母亲扇风的手。 再往前，记忆只在照片中凝固。 就这样，平常地活着，安然无恙地活着。 当时怎知宇宙之大，也从不担忧人生几何； 现在知道了宇宙的度量，明白了人生几何， 目睹了活着，和死亡，目睹了一个时代的结束。 人体维护的一切，只是将熵增的速率变缓。 但那又怎样。 我欣然接受。 我已经学会了走路，奔跑；说话，呐喊；回忆，思考；见面，告别。 并且我仍然会 奔跑着，呐喊着，思考着，以及告别着。 但无论怎样，请别忘了： 走路，说话，回忆和见面， 也是你的本能。"}],"posts":[{"title":"【PCG】Perlin Noise","slug":"Unity/PerlinNoise","date":"2023-09-20T16:25:23.000Z","updated":"2023-09-21T05:32:24.084Z","comments":true,"path":"2023/09/21/Unity/PerlinNoise/","link":"","permalink":"https://andrew-rey.github.io/2023/09/21/Unity/PerlinNoise/","excerpt":"“程序化内容生成——地形/材质等的程序化生成” ——关于一些剑走偏锋的项目历程","text":"“程序化内容生成——地形/材质等的程序化生成” ——关于一些剑走偏锋的项目历程 Perlin Noise about the Perlin noise: ref 4 types of noise that are similar and that are often confused with one another classic Perlin noise improved Perlin noise simplex noise valuse noise about the range of Perlin noise: ref 12// mapping a 2D position to a random number range from -1 to 1var perlinValue = PerlinNoise(float x, float y); for texture: x, y stand for pixel position, but multiplied by a small number called the frequency Parameters frequency of 2D waves amplitude of 2D waves octaves: the amount of waves to be generated persistence: amount of change in size between one curve and the next offset: provide variation in the output height scale: scaling factor to accentuate the output generated Property if 2 inputs are near to each other, the results of the noise function will be near to each other too. guarantee continuity Generation given a 2D grid as following, the input of Perlin noise is each pixel. 1695262810353 assign each gird point a random constant vector. (note: gridVector[4]) get the vectors pointing from the grid point to the input point(target pixel). (note: inputVector[4]) for each of the 4 corners of the square where the target pixel lies, calculate the dot products: for i in range(4): calculate dot(gridVector[i], inputVector[i]) 1695264135606 interpolate between those 4 values and the result is the value of the target pixel. difference between Perlin noise and value noise: Perlin noise use dot product between 2 vectors to get 4 corners' values while value noise use a pseudo-random number. Discussion gradient constant vectors why we need permutation table(noted as P) &amp; gradient table(noted as G): P is used to select a random gradient from G. P provides randomness and repeatability(???)4 how to generate a permutation table: the core is double and shuffle. we have known that permutation table is used to select a gradient from gradient table and one gradient is defined by (x,y) (which is the grid point position). so one tuple (x,y) defines one permutation value. so the size of permutation table is \\(len(X)\\times len(Y)\\) (double). to guarantee the randomness, we can do shuffle for \\(0-255\\). the code to generate permutation table is (where \\(len(X) = len(Y)\\)): 123456789var permutationTable = new int[2 * len(X)];for (var i = 0; i &lt; len(X); i += 1) permutationTable[i] = i;permutationTable = Shuffle(permutationTable);for (var i = 0; i &lt; len(X); i += 1) permutationTable[len(X) + i] = permutationTable[i];// visit the table given (x,y)var valueTopRight = P[P[x+1]+y+1];var valueTopLeft = P[P[x]+y+1];var valueBottomRight = P[P[x+1]+y];var valueBottomLeft = P[P[x]+y]; how to generate a gradient table: use 4 constant vectors: \\((1f,1f), (1f, -1f), (-1f, 1f), (-1f, -1f)\\). so just do modulo with the permutation value given (x,y) can get one gradient vector. 12345678Vector2 GetConstantVector(v) &#123; switch v % 4: case 0: return Vector2(1f,1f); case 1: return Vector2(1f,-1f); case 2: return Vector2(-1f,1f); case 3: return Vector2(-1f,-1f); default: throw undefined error;&#125;","categories":[{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/categories/Unity/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/tags/Unity/"},{"name":"PCG","slug":"PCG","permalink":"https://andrew-rey.github.io/tags/PCG/"},{"name":"Terrain","slug":"Terrain","permalink":"https://andrew-rey.github.io/tags/Terrain/"}]},{"title":"【从零开始的C++】IDE安装和配置","slug":"CS/Tutorial-0","date":"2023-09-18T16:54:18.000Z","updated":"2023-09-20T16:23:49.328Z","comments":true,"path":"2023/09/19/CS/Tutorial-0/","link":"","permalink":"https://andrew-rey.github.io/2023/09/19/CS/Tutorial-0/","excerpt":"\"第0节课\"","text":"\"第0节课\" 前前言：只适用于Windows 前言：建议使用VisualStudio2019，可以有一个舒适的coding环境（来自个人偏见），当然DEV-C++的优点在于简单方便，VS有点笨重了 欢迎大家折腾VSCode，可以熟悉CMake构建工程 初学还是建议VisualStudio 啥是IDE IDE：Integrated Development Environment，集成开发环境 集成了 编辑器（理解为打字的界面）、 编译、 调试等主要功能 当然也集成了一些代码高亮、自动补全等功能 目的是提高coding体验 准备工作 在SEU文档云（群里面的链接）里面下载想用的IDE安装包 不要下载到C盘（选择安装路径时，点击“浏览”，然后选择除了C盘以外的盘进行安装） 比如下载到D:/LoveCpp/vs这个路径下面 貌似VisualStudio2010也在网盘里面（就是那个2G多的文件，可以不用下载，以后特殊情况可能用到，但问题不大） VisualStudio2019安装和配置 对应压缩包 vs_enterprise__2019.zip 可以参考网站：这个 解压，文件夹里面是这个东西 1695057304137 管理员权限运行即可（会有对话框，同意即可） 运行后会有一个VS的弹窗，点击继续即可 继续后出现如下界面 1695057447568 下面开始安装C++环境 1695057753734 点击安装后只需要耐心等待（下面那个VS不用管，那是我之前装的） 1695057843665 安装完成后需要重启 重启后，安装完成，可以在开始目录/搜索框中找到VS，打开即可 1695058038603 如果出现了登陆界面，可以选择以后再说，也可以用微软账户登陆 恭喜你，到此为止，你已经成功安装了VisualStudio2019！！！ Dev-C++安装 对应文件 Dev-Cpp 5.11 TDM-GCC 4.9.2 Setup.exe 直接运行exe可执行文件，得到如下界面，并选择English点击OK 1695058487870 然后会出现一个协议，想看就看一下，点击I Agree 1695058532086 出现下图，直接继续Next 1695058637180 选择Browse浏览，选择一个除了C盘以外的路径安装，然后点击Install安装 安装完成后点击Finish，然后打开DEV-C++ 1695058832613 语言选择简体中文，其它默认即可 恭喜你成功安装了Dev-C++！！！ Hello World!——第一个程序 一件重要的事情 在除了C盘的其它盘（比如D盘）创建一个文件夹，专门用于存放C++项目，比如下面这个文件结构： 12345678910+-D: | +-CppProjects | +-project0 | | | +-some-project-files... +-project1 +-project2 +-... 在VisualStudio2019里面写代码！ 强烈建议看这个教程，一定要注意，选择项目位置的时候选用 我们在上面两行中创建的文件夹（不是教程中的C盘路径），路径中不能含有中文（不然以后会出现一些神秘的错误） 示例位置：D:/CppProjects/project0 所以是不是输出了HelloWorld呢？ 在DEV-C++里面写代码！ 建议看这个教程，里面的代码使用与上面VS教程中一样的代码，并将保存的文件命名为 xxx.cpp（也就是以cpp为后缀） 觉得不好玩？ 不如把下面这几个代码贴过去看看？ 快速排序算法 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;vector&gt;int hhh(std::vector&lt;int&gt; &amp;a, int left, int right) &#123; auto i = left; auto j = right; auto key = a[left]; while(i != j) &#123; while(i &lt; j &amp;&amp; a[j] &gt;= key) j--; while(i &lt; j &amp;&amp; a[i] &lt;= key) i++; std::swap(a[i], a[j]); &#125; std::swap(a[left], a[i]); return i;&#125;void qs(std::vector&lt;int&gt; &amp;a, int left, int right) &#123; if( left &gt;= right ) return; auto i = hhh(a, left, right); qs(a, left, i - 1); qs(a, i + 1, right);&#125;void pr(std::vector&lt;int&gt; a) &#123; for (auto v: a) &#123; std::cout &lt;&lt; v &lt;&lt; &quot;, &quot;; &#125; std::cout &lt;&lt; std::endl;&#125;int main() &#123; std::vector&lt;int&gt; vec &#123;5, 10, 9, 3, 20, 1, 0, -5, -10&#125;; std::cout &lt;&lt; &quot;former array is:&quot; &lt;&lt; std::endl; pr(vec); qs(vec, 0, vec.size() - 1); std::cout &lt;&lt; &quot;now array is:&quot; &lt;&lt; std::endl; pr(vec); return 0;&#125; 输出结果是这样的： 1695061391905 可以看见原本凌乱的数组被从小到大排好了序。 感兴趣的话可以查看这个博客","categories":[{"name":"Assistant","slug":"Assistant","permalink":"https://andrew-rey.github.io/categories/Assistant/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"},{"name":"Assistant","slug":"Assistant","permalink":"https://andrew-rey.github.io/tags/Assistant/"}]},{"title":"【SteamVR】自学","slug":"Unity/SteamVR","date":"2023-08-27T12:45:00.000Z","updated":"2023-08-27T12:45:33.967Z","comments":true,"path":"2023/08/27/Unity/SteamVR/","link":"","permalink":"https://andrew-rey.github.io/2023/08/27/Unity/SteamVR/","excerpt":"","text":"Actions","categories":[],"tags":[]},{"title":"【VR项目练习】诗歌场景生成项目","slug":"VR/vr-poemGeneration","date":"2023-08-26T07:49:12.000Z","updated":"2023-09-18T17:43:54.544Z","comments":true,"path":"2023/08/26/VR/vr-poemGeneration/","link":"","permalink":"https://andrew-rey.github.io/2023/08/26/VR/vr-poemGeneration/","excerpt":"“练手项目（内心惊恐”","text":"“练手项目（内心惊恐” TODO List 优化场景的光照 优化人物/动物的行为 优化语言输入中的数据库匹配 添加主角本体 优化/丰富NPC/场景交互 整体的思路 语音识别模块：使用流式语音处理的预训练模型，用爬虫爬取古诗文网中的古诗和语音作为训练集训练模型 场景生成模块：根据语音识别结果生成对应场景 困难 语音识别模块 模型的选择 数据集的构建（第一周实践后发现有部分古诗词原文有注释，和录音不能很好匹配，需要手动调整） 关键词如何匹配（语音识别后如何快速将识别结果和关键词进行匹配，由于中文一个读音有多种对应的汉字，如何进行匹配） 场景生成模块 不会真要为每一首诗单独创建一个场景吧！ 目前的方案是把场景分为主要场景和次要场景，主要场景根据诗词里面的特色单独人工搭建，次要场景随机生成 第三周 用Perlin Noise生成随机heightMap再生成地形 不同起伏程度的地形 山区地形 居民区地形 湖区地形 实现区域划分和不同起伏程度 区域划分的参数用结构体保存 -&gt; 以后转为解析出来的对应数据 起伏程度 -&gt; 改变柏林噪声中的随机梯度的模（或者改变内积以后的值） demo演示 第二周 项目框架 1693908290231 任务1：原模型转化为low poly模型 使用插件（LowPoly Mesh Generator）将模型逐个转化（已完成）并保存为prefab 初步对预制体进行分类 任务2：json生成地形（思路是语音识别的结果保存为json格式，然后根据json参数生成场景；目前先实现地形生成） 手动生成：尝试了LowPoly Terrain Generator插件 代码生成：解析json数据-&gt;读取Terrain有关的参数-&gt;根据不同的mode生成不同的HeightMap-&gt;将HeightMap用于插件内的成员变量-&gt;在自己的脚本里面调用插件 难点是如何生成HeightMap，目前考虑的是先生成png形式的HeightMap，例如 1693906658523 在unity内生成的地形如下 1693907088483 第一周 寻找语音识别模型 流式语音处理 对中文准确率高 最好是预训练的，可以将进行古诗文/语音的适配 学习/熟悉Unity的VR开发 先了解了无设备开发 在连接设备的情况下如何进行开发（目前找到了网课讲解SteamVR和HTCVive） 场景的搭建（之前在实验室主机上面查看了整个项目的场景，配色偏暗，想修改，但是不是当务之急） 目前做的事情 爬虫能爬取古诗词原文（还不能爬取语音） 预训练模型选择的是MASR框架，项目地址，内部提供了多个预训练模型，并且能支持流式的语音处理 论文 讲解 1693294494575 浅学了一下Unity的VR开发（没有借设备，只是听课）","categories":[{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/categories/VR/"}],"tags":[{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/tags/VR/"},{"name":"c#","slug":"c","permalink":"https://andrew-rey.github.io/tags/c/"}]},{"title":"【VR】头显等设备的模拟（无设备开发）","slug":"VR/vr-simulation","date":"2023-08-26T05:40:38.000Z","updated":"2023-08-26T07:47:54.519Z","comments":true,"path":"2023/08/26/VR/vr-simulation/","link":"","permalink":"https://andrew-rey.github.io/2023/08/26/VR/vr-simulation/","excerpt":"","text":"无设备开发VR 插件 Vive Input Utility Vive Registry Tool SteamVR Plugin","categories":[],"tags":[]},{"title":"【Unity3D】反向动力学（Inverse Kinematics）","slug":"Unity/IK","date":"2023-08-23T09:31:14.000Z","updated":"2023-08-23T15:13:12.273Z","comments":true,"path":"2023/08/23/Unity/IK/","link":"","permalink":"https://andrew-rey.github.io/2023/08/23/Unity/IK/","excerpt":"","text":"FABRIK (Forward and Backward Reaching Inverse Kinematics)算法 FABRIK算法分为两个部分 Forward Reaching Backward Reaching 大致而言是先根据目标位置推导各个关节的位置（Forward Reaching），若 根关节点 发生了位移，则需要进行Backward Reaching，也就是 在正向的基础上 将根关节点移动至原位置，逐一更改其它关节点。重复该步骤，直到最末的关节点距离目标位置小于某个阈值。 在IK的过程中需要注意的点 IK中 根关节的位置保持不变 对于一个特定的目标位置，求解的关节位置有多个","categories":[],"tags":[]},{"title":"【Unity3D】Movements with CharacterController","slug":"Unity/Tutorial-Movement","date":"2023-08-06T11:38:48.000Z","updated":"2023-08-14T11:25:02.701Z","comments":true,"path":"2023/08/06/Unity/Tutorial-Movement/","link":"","permalink":"https://andrew-rey.github.io/2023/08/06/Unity/Tutorial-Movement/","excerpt":"","text":"Character Controller 角色控制器不同于刚体+碰撞体，但角色控制器可以控制角色的移动并进行碰撞检测。不过神奇的地方在于被它绑定的角色并不会受到力的作用，角色只有在 Move函数里面才能进行运动（当然会受到碰撞检测的制约）。然后就基于这个组件做了一个人物移动的demo。 -&gt; 官方文档 场景搭建 scene 模型：Bronya-次生银翼 场景：Unity商店 绑定角色控制器 添加Physics/Character Controller组件，调整大小和位置，使其刚好包围人的主体部分。 1691338767159 绑定玩家输入 这里要使用键盘AWSD作为人物walk的输入，按住shift以后改为run。输入的管理使用InputSystem插件。 创建Input Action文件 创建动作映射： Action map -&gt; Actions -&gt; Action Propertites / Binding Propertites 1691339763299 自动生成C#文件（放在scripts目录下面），里面自动生成以上的映射关系，在其它地方使用时需要 Import UnityEngine.InputSystem 角色移动 接下来自己创建一个用于角色动作控制的脚本 创建好以后是如下形式的 1234567891011using UnityEngine;namespace Bronya &#123; public class BronyaActionController : MonoBehaviour &#123; // Start is called before the first frame update private void Start() &#123; &#125; // Update is called once per frame private void Update() &#123; &#125; &#125;&#125; 添加成员变量： 123456// 创建InputAction的文件名，用于管理角色输入private BronyaInput _bronyaInput;// 角色控制器组件private CharacterController _characterController;// AWSD方向键输入private Vector2 _movementInput; 在 Awake()函数中实例化上述中的两个成员变量： 1234private void Awake() &#123; _bronyaInput = new BronyaInput(); _characterController = GetComponent&lt;CharacterController&gt;();&#125; 并创建enable和disable函数用于控制角色控制器是否启用： 1234567private void OnEnable() &#123; _bronyaInput.BronyaActionController.Enable(); &#125; private void OnDisable() &#123; _bronyaInput.BronyaActionController.Disable(); &#125; 行走 行走的实现需要包含速度，方向； 由于用到了InputSystem这个插件，自己实现行走的回调函数 123456789public static void OnWalk(InputAction.CallbackContext context) &#123; // movement input has been normalized MovementInput = context.ReadValue&lt;Vector2&gt;(); IsWalkPressed = MovementInput.x != 0 || MovementInput.y != 0; // assign to walk-variables WalkSpeedVector.x = MovementInput.x * WalkSpeedFactor; WalkSpeedVector.z = MovementInput.y * WalkSpeedFactor; WalkSpeedVector.y = GlobalVariables.ZeroF;&#125; 在Awake函数中绑定回调函数。回调函数中主要是计算角色行走时的速度。 12_inputSystem.BronyaActionController.Walk.started += MovementController.OnWalk;_inputSystem.BronyaActionController.Walk.canceled += MovementController.OnWalk; 另外编写控制角色行走的函数MovementHandler()用于帧更新（放在Update()中） 123 private void MovementHandler() &#123; _characterController.Move(MovementController.WalkSpeedVector * Time.deltaTime);&#125; 此时等待Unity编译后可以操控角色行走（移动） 1691924618535 添加动画 下面添加行走动画：首先要找动画资源，拖入unity中修改骨骼为Humanoid（这里略）；其次为角色添加AnimationController，可以发现动画是由状态机控制的，创建初始状态为Idle，再创建新状态为Walk（后续的跑步亦如此） 1691926979364 为状态之间添加上图所示的Transition，三个状态之间的转换用两个布尔型的变量来控制即可 1692006048905 在创建用于控制角色动画的函数 12345678910111213141516171819private void AnimationHandler() &#123; var isWalking = _bronya.GetIsWalking(); var isRunning = _bronya.GetIsRunning(); if (_characterController.isGrounded) &#123; if (MovementController.IsWalkPressed &amp;&amp; !isWalking) &#123; _bronya.PlayWalkAnimation(); &#125; else if (!MovementController.IsWalkPressed &amp;&amp; isWalking) &#123; _bronya.StopWalkAnimation(); &#125; if ((MovementController.IsWalkPressed &amp;&amp; MovementController.IsRunPressed) &amp;&amp; !isRunning) &#123; _bronya.PlaRunAnimation(); &#125; else if ((!MovementController.IsWalkPressed || !MovementController.IsRunPressed) &amp;&amp; isRunning) &#123; _bronya.StopRunAnimation(); &#125; &#125;&#125; 相关的角色动作都记录在如下的类中，和上面的移动代码分开管理 123456789101112131415161718192021222324252627282930313233343536373839namespace Bronya &#123; public class BronyaActionController : MonoBehaviour &#123; private Animator _animator; private int _isWalkingHash; private int _isRunningHash; private void Awake() &#123; _animator = GetComponentInChildren&lt;Animator&gt;(); _isWalkingHash = Animator.StringToHash(&quot;isWalking&quot;); _isRunningHash = Animator.StringToHash(&quot;isRunning&quot;); &#125; public bool GetIsWalking() &#123; return _animator.GetBool(_isWalkingHash); &#125; public bool GetIsRunning() &#123; return _animator.GetBool(_isRunningHash); &#125; public void PlayWalkAnimation() &#123; _animator.SetBool(_isWalkingHash, true); &#125; public void StopWalkAnimation() &#123; _animator.SetBool(_isWalkingHash, false); &#125; public void PlaRunAnimation() &#123; _animator.SetBool(_isRunningHash, true); &#125; public void StopRunAnimation() &#123; _animator.SetBool(_isRunningHash, false); &#125; &#125;&#125; 目前的移动如下所示 1692012104234 添加转向 可以发现目前的问题是角色不会根据移动的方向进行转向，因此继续添加控制角色转向的代码，如下 12345678910private void RotationHandler() &#123; Vector3 lookAtPosition; lookAtPosition.x = MovementController.WalkSpeedVector.x; lookAtPosition.z = MovementController.WalkSpeedVector.z; lookAtPosition.y = GlobalVariables.ZeroF; if (MovementController.IsWalkPressed) &#123; transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(lookAtPosition), MovementController.RotationSpeedFactor); &#125;&#125; 可以看到角色已经可以正常进行转向了 1692012118894 添加重力 但此时还可以发现一个致命问题是角色没有重力 这是因为在CharacterController中控制的物体是不受重力的，需要自己添加向下的力 于是添加GravityHandler如下 1234567891011private void GravityHandler() &#123; if (_characterController.isGrounded) &#123; MovementController.WalkSpeedVector.y = GlobalVariables.GravityAccelerate; MovementController.RunSpeedVector.y = GlobalVariables.GravityAccelerate; &#125; else &#123; MovementController.WalkSpeedVector.y += GlobalVariables.GravityAccelerate; MovementController.RunSpeedVector.y += GlobalVariables.GravityAccelerate; &#125;&#125; 即：如果此时CharacterController检测到角色与地面有接触时，角色的重力直接等于9.8，方向向下（相当于给角色一个向下的速度，让角色“压”住地面）；如果没有与地面有接触，则不断增加角色的下落速度（模拟自由落体时速度的变化） 跑步 跑步的代码类似与走路，唯一不同之处是我们选择用button来控制角色是否应该开始跑步 角色移动的演示 1692012129227","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/categories/Unity3D/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/tags/Unity3D/"},{"name":"CharacterController","slug":"CharacterController","permalink":"https://andrew-rey.github.io/tags/CharacterController/"}]},{"title":"【操作系统】Process","slug":"CS/os-7","date":"2023-06-28T13:48:58.000Z","updated":"2023-06-29T10:23:33.724Z","comments":true,"path":"2023/06/28/CS/os-7/","link":"","permalink":"https://andrew-rey.github.io/2023/06/28/CS/os-7/","excerpt":"","text":"进程 进程状态机模型和线程状态机模型的对比 线程状态机共享内存，但进程状态机有独立的内存，不共享内存 二者都有独立的堆栈和寄存器 操作系统是状态机的管理者，同时保存多个状态机（虚拟化） 特殊的系统调用来管理状态机：CreateProcess(), TerminateProcess 每个线程都只能看见自己的内存部分，看不到其它线程的内存空间。 虚拟存储系统 通过虚拟内存实现每次“拿出来一个执行” 中断后进入操作系统代码，“换一个执行” 操作系统本身也可以看作是一个状态机 有自己的内存等等 在操作系统完成初始化后，只有一个init进程被启动 在创建出来init进程后，操作系统变成了一个中断和系统调用的处理程序 其余的所有进程都由init进程创建出来 fork：创建状态机 UNIX做一份状态机完整的复制（内存，寄存器现场） int fork();：新创建进程返回0，执行fork的进程返回子进程的进程号 复制失败（内存不够），返回-1 所有的东西，包括库函数，自己malloc的内存，数据都会被复制 进程树pstree reset状态机：execve：int execve(const char* pathname, char* const argv[], char* const envp[]);，argv是函数的参数，envp是环境变量，对应了main的参数 execute the program refferred to by pathname - 将当前进程重置成一个可执行文件描述状态机的初始状态，可以是二进制文件，c文件 - execve是唯一能执行程序的系统调用，也是一切进程strace的第一个系统调用 环境变量： env查看 - 在创建子进程时默认继承父进程的环境变量 - export可以修改环境变量 - PATH修改可执行文件的搜索路径 销毁状态机：void _exit(int status) 立即销毁当前状态机，并允许有返回值 exit()(clib) _exit() __exit() exit_gourp()","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Interruption","slug":"CS/os-6","date":"2023-06-28T08:08:23.000Z","updated":"2023-06-29T08:40:02.953Z","comments":true,"path":"2023/06/28/CS/os-6/","link":"","permalink":"https://andrew-rey.github.io/2023/06/28/CS/os-6/","excerpt":"\"中断机制是现代操作系统的基石\"","text":"\"中断机制是现代操作系统的基石\" 中断 多处理器的状态机：每个CPU有单独的寄存器，共享同一块内存，每次执行需要选择CPU来执行 如果某个CPU陷入死循环，则死机 中断：gdb调试可以看见有eflags寄存器存储中断的信号（IF） 跳转 x86：获得中断号n（由中断） 关闭中断：cli(clear interrupt flag) 直接在应用程序中关闭时：SIGSEGV段错误（address boundary error） 单处理器上并发来自于中断 实现单处理器多线程避免数据竞争：关闭中断，等待数据操作结束，打开中断 中断保存和恢复寄存器 单处理器上下文切换 发生中断-操作系统代码开始执行-状态机被封存-切换到另一个状态机-中断返回另一个状态机的状态-此时封存的状态还在-可以被恢复到处理器上执行 线程切换 程序的状态：包括了代码段、数据段，这二者对所有的线程共享；除此之外，状态内有一定数量的线程，每个线程有自己的状态，包括自己的堆栈，自己的数据信息（例如名字）；此外还有一系列寄存器 状态的转移：获取一条指令/发生中断 中断发生：把处理器的寄存器保存在内存，再从内存中还回处理器","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Bugs in Concurrency","slug":"CS/os-5-3","date":"2023-06-24T07:03:06.000Z","updated":"2023-06-24T10:36:18.872Z","comments":true,"path":"2023/06/24/CS/os-5-3/","link":"","permalink":"https://andrew-rey.github.io/2023/06/24/CS/os-5-3/","excerpt":"\"并发bugs\"","text":"\"并发bugs\" 死锁 A deadlock is a state in which each member of a group is waiting for another member, including itself, to take action 线程互相等待 AA-Deadlock：一个线程也可以出现死锁（对一个锁上两次锁，可能存在于不同的函数调用/终端执行流） ABBA-Deadlock：哲学家吃饭 四个必要条件 mutual-exclusion（互斥）：一个资源只能被一个线程占用 wat-for：一个线程等其它资源时，自己的资源不会释放 no-preeption：线程不能抢夺其它线程的资源 circular-chain：循环等待 打破以上任意条件可以避免死锁/可以设置死锁恢复程序 死锁的应对 最容易的当然是破坏循环等待 lock ordering 任意时刻系统中的锁都是有序的（拓扑排序） 线程需要严格按照固定顺序获得所有锁 在任意时刻获得最靠后的那把锁的线程，都可以顺利往后执行，执行完后，按顺序释放锁 数据竞争 不同的线程同时访问同一内存，且至少有一个是写 data race is an undefined behavior（编译器不对任何结果负责） return：把栈上的地址pop到pc上 store load 锁消灭了数据竞争 Weak memory model：允许不同的线程看到不同的观察结果 原子性和顺序违反 互斥锁：实现原子性 - 忘记上锁：违反原子性(Atomicity violation) - 在条件检查后，使用变量前，修改变量（此时条件不满足，但是已经进入某个线程或控制流） 条件变量/信号量：实现先后顺序同步 - 忘记同步：违法顺序(Order violation) - concurrent use after free 防御性编程 编译器的-fsanitize=thread线程消毒器 可以检查是否存在数据竞争（编译器能知道内存访问） 跨线程的内存访问可以实现为一个图，如果同一个内存的访问之间不可达，则会发生data race 编译器的-fsanitize=address检查内存分配（是否use-after-free，double-free，double-alloc） 低配版：用一些flag标识是否已经分配 canary：牺牲一些内存单元，来预警memory error的发生 线程的栈溢出：牺牲栈空间，用来检测 lockdep 记录上锁顺序，检查死锁 甚至可以是低配版：检查spin的数量，超过某个明显不正常的数值就报告+debugger+backtrace","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【算法】基本数据结构","slug":"Algorithm/ds","date":"2023-06-13T05:21:13.000Z","updated":"2023-06-24T11:45:48.432Z","comments":true,"path":"2023/06/13/Algorithm/ds/","link":"","permalink":"https://andrew-rey.github.io/2023/06/13/Algorithm/ds/","excerpt":"\"基本数据结构\"","text":"\"基本数据结构\" 栈 LIFO表 C++数组模拟栈 1234567891011121314int st[N];// 这里使用 st[0] (即 *st) 代表栈中元素数量，同时也是栈顶下标// 压栈 ：st[++*st] = var1;// 取栈顶 ：int u = st[*st];// 弹栈 ：注意越界问题, *st == 0 时不能继续弹出if (*st) --*st;// 清空栈*st = 0; 队列 FIFO表 c++数组模拟队列 1234567891011121314151617int q[SIZE], ql = 1, qr;// 插入元素q[++qr] = x;// 删除元素ql++;// 访问队首q[qr];// 访问队尾q[ql];//清空队列ql = 1;qr = 0; 双栈模拟队列：两个栈模拟一个队列，队尾的栈为F，队首的栈为S push：插入到栈F中 pop：如果S非空，让S弹栈；否则先把F的元素倒过来压入S中，然后让S弹栈 双端队列 可以在队首/队尾插入或删除元素的队列。相当于是栈与队列功能的结合。具体地，双端队列支持的操作有 4 个 在队首插入一个元素 在队尾插入一个元素 在队首删除一个元素 在队尾删除一个元素 循环队列 使用数组模拟队列会导致一个问题：随着时间的推移，整个队列会向数组的尾部移动，一旦到达数组的最末端，即使数组的前端还有空闲位置，再进行入队操作也会导致溢出（这种数组里实际有空闲位置而发生了上溢的现象被称为「假溢出」）。 解决假溢出的办法是采用循环的方式来组织存放队列元素的数组，即将数组下标为 0 的位置看做是最后一个位置的后继。（数组下标为 x 的元素，它的后继为 (x + 1) % SIZE）。这样就形成了循环队列。 来自OIWiki 链表 单向链表 1234struct Node { int value; Node *next;}; 删除结点p 实际上是删除p+1：将p+1的值赋给p，p的next指向p的next的next，删除p+1 双向链表 12345struct Node { int value; Node *left; Node *right;}; 单向循环链表 将单向链表的头尾相连接。注意： 插入数据时要判断原链表是否为空；为空则自身循环，不为空则正常插入 为空则插入的数据node的指针和链表指针都指向自己 不为空则和单向链表一致 双向循环链表 插入数据时，注意要修改左右指针 异或链表 本质上还是双向链表：利用按位异或的值，仅用一个指针的内存大小实现双向链表的功能 在结点node中定义lr = left_addr ^ right_addr 访问left：lr ^ right_addr 访问right：lr ^ left_addr 异或自反：A ^ B ^ B = A ^ (B ^ B) = A ^ 0 = A 哈希表 哈希函数：把key映射到索引空间，f(key)是一个可以作为数组下标的整数 整数为key：使用整数作为key的时候，如果整数范围小，直接将key作为索引；若范围较大（ ）则 一般把键值模一个较大的质数作为索引 作为哈希函数 字符串为key：先将字符串哈希，再将哈希结果作为key：可以把字符串当作长度为n的进制为127的数（ ），将得到的 对 取模（unsigned long long最大值）。 容易冲突 使用双哈希：选取两个大质数，当两个字符串的哈希值对两个大质数模相等时，才认为相等。 冲突 拉链法：在每个存放数据的地方开一个链表，如果有多个键值索引到同一个地方，则放到链表内部即可。如果索引的范围是 ，哈希表的大小为 ，则一次插入或查询的期望比较次数为 闭散列法：把所有记录直接存储在散列表中，如果冲突则以某种规则检查 线性探查法：在d处冲突，则依次检查d+1，d+2. 并查集 参考 用于管理元素所属集合的数据结构，实现为一个森林，每棵树表示一个集合，节点表示对应集合中的元素 合并：合并两个元素的所属集合 查询：查询某个元素所属集合（查询根节点），用于判断两个元素是否在同一集合 结构：一个数组，存储每个元素的父结点 初始化：初始时，每个结点以自己作为父结点 12345int fa[MAXN];inline void init(int n) { for (int i = 1; i &lt;= n; ++i) fa[i] = i;} 合并：先找到两个结点的根节点，然后将某一个设置为根节点（下面的代码将j的父结点设置为i的父结点） 123inline void merge(int i, int j) { fa[find(i)] = find(j);} 查询：两个结点是否在同一个集合取决于根节点是否相同（递归往上查询） 1234int find(int x) { if(fa[x] == x) return x; else return find(fa[x]);} 并查集构建结果 路径压缩 由于构建以后的深度可能比较深，会影响查询的效率，因此可以考虑路径压缩，把属于该集合的元素直接连接到根结点。 压缩这一步是在查询的时候顺便解决的 1size_t dsu::find(size_t x) { return pa[x] == x ? x : pa[x] = find(pa[x]); } 启发式合并 将节点较少或深度较少的树连接到另一棵 删除 可以将其根节点设置为自己（为了保证删除的都是叶子结点，可以将其副本作为根节点） 移动 将副本作为根节点 复杂度 时间复杂度：，是阿克曼函数反函数，增长极其缓慢 空间复杂度： 带权并查集 在并查集的边上定义某种权值、以及这种权值在路径压缩时产生的运算，从而解决更多的问题 应用 OIWiki 堆 二叉堆 完全二叉树 父亲的权值不小于儿子的权值（大根堆） 由堆性质，树根存的是最大值（getmax 操作就解决了） 插入 最下一层最右边的叶子之后插入 向上调整：如果这个结点的权值大于它父亲的权值，就交换，重复此过程直到不满足或者到根 删除 删除根节点：考虑插入操作的逆过程，设法将根结点移到最后一个结点，然后直接删掉。通常采用的方法是，把根结点和最后一个结点直接交换 向下调整：在该结点的儿子中，找一个最大的，与该结点交换，重复此过程直到底层 1234567891011121314151617// 向上调整void up(int x) { while (x &gt; 1 &amp;&amp; h[x] &gt; h[x / 2]) { swap(h[x], h[x / 2]); x /= 2; }}// 向下调整void down(int x) { while (x * 2 &lt;= n) { t = x * 2; if (t + 1 &lt;= n &amp;&amp; h[t + 1] &gt; h[t]) t++; if (h[t] &lt;= h[x]) break; std::swap(h[x], h[t]); x = t; }} 建堆 向下调整：从叶子开始，逐个向下调整 由于叶子节点不用调整，因此可以从的地方开始调整 123void build_heap_2() { for (i = n; i &gt;= 1; i--) down(i);} 配对堆 支持插入，查询/删除最小值，合并，修改元素 可并堆 基于势能分析 不能可持久化 带权多叉树 满足堆的性质：每个节点的值都小于或等于他的所有孩子（小根堆） 不一定是完全的 child-sibling表示法 配对堆 123456struct Node { T v; // T为权值类型 Node *child, *sibling; // child 指向该节点第一个儿子，sibling 指向该节点的下一个兄弟。 // 若该节点没有儿子/下个兄弟则指针指向 nullptr。}; child-sibling表示法： 一个节点的所有儿子节点形成一个单向链表。每个节点储存第一个儿子的指针，即链表的头节点；和他的右兄弟的指针 查询最小值：直接返回根节点（权值） 合并 找到两个根节点的较小者，将较大的根节点作为其孩子插入进去 孩子链表按插入时间排序，最右边的节点最早成为父节点的孩子，最左边最近成为孩子 配对堆的合并 12345678910Node* meld(Node* x, Node* y) { // 若有一个为空则直接返回另一个 if (x == nullptr) return y; if (y == nullptr) return x; if (x-&gt;v &gt; y-&gt;v) std::swap(x, y); // swap后x为权值小的堆，y为权值大的堆 // 将y设为x的儿子 y-&gt;sibling = x-&gt;child; x-&gt;child = y; return x; // 新的根节点为 x} 插入：把新元素视为一个配对堆即可 删除最小值（根节点） 删除根节点 把根节点的孩子们两两配对合并 将新产生的森林从右向左（旧的向新的方向）合并 下面的代码已经保证了顺序 12345678910111213141516Node* delete_min(Node* x) { Node* t = merges(x-&gt;child); delete x; // 如果需要内存回收 return t;}// x是左部的节点，c是右部的节点，每次合并保证右部都已经合并（递归实现）// x与相邻的右部sibling节点合并，再与右部节点合并Node* merges(Node* x) { if (x == nullptr || x-&gt;sibling == nullptr) return x; // 如果该树为空或他没有下一个兄弟，就不需要合并了，return。 Node* y = x-&gt;sibling; // y 为 x 的下一个兄弟 Node* c = y-&gt;sibling; // c 是再下一个兄弟 x-&gt;sibling = y-&gt;sibling = nullptr; // 拆散 return meld(merges(c), meld(x, y)); // 核心部分} 减小一个元素的值：基本思路是，当减小一个元素的值时，由于是小根堆，该元素对应的子树仍然满足配对堆的性质，因此（如果修改元素后，该元素与父母节点不满足性质）可以将子树剖出来，再与原来的树合并 注意：为了剖离子树，可能会用到双向链表 增大一个元素的值：以该节点为根的子树剖出来，然后删去它的最小值（该节点），插入该节点修改后的值，最后与原堆合并 均摊复杂度 meld: delete-min: decrease-key: 左偏树 可并堆 有很多应用 二叉树dist的定义 dist不是深度 外节点：左孩子/右孩子节点为空 外节点的dist定义为1 不是外节点的dist为其到子树中最近的外节点的距离+1 空节点的dist定义为0 左偏树定义 二叉树 满足堆性质 每个左孩子的dist大于等于右孩子的dist 因此左偏树每个节点的dist都等于其右儿子的dist加一 左偏树 合并：合并两个堆时，由于要满足堆性质，先取值较小（小根堆）的那个根作为合并后堆的根节点，然后将这个根的左儿子作为合并后堆的左儿子，递归地合并其右儿子与另一个堆，作为合并后的堆的右儿子。为了满足左偏性质，合并后若左儿子的 小于右儿子的 ，就交换两个儿子。原文 123456789int merge(int x, int y) { if (!x || !y) return x | y; // 若一个堆为空则返回另一个堆 if (t[x].val &gt; t[y].val) swap(x, y); // 取值较小的作为根 t[x].rs = merge(t[x].rs, y); // 递归合并右儿子与另一个堆 if (t[t[x].rs].d &gt; t[t[x].ls].d) swap(t[x].ls, t[x].rs); // 若不满足左偏性质则交换左右儿子 t[x].d = t[t[x].rs].d + 1; // 更新dist return x;} ST表 可重复贡献问题 对于某个运算opt，如果 ，则对应的 区间查询 是一个可重复贡献问题 最大值：RMQ问题（区间最大/最小值） 最大公因数：GCD 问题 给定n个数，有m个询问，每次询问需要给出区间 的最大值 ST表（Sparse Table）：可以 预处理， 回答询问，不支持修改元素","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/tags/Algorithm/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"https://andrew-rey.github.io/tags/Data-Structure/"}],"author":"Andrew-Ray"},{"title":"【操作系统】HPC & HRI","slug":"CS/os-5-2","date":"2023-06-12T14:36:21.000Z","updated":"2023-06-13T03:04:57.857Z","comments":true,"path":"2023/06/12/CS/os-5-2/","link":"","permalink":"https://andrew-rey.github.io/2023/06/12/CS/os-5-2/","excerpt":"\"什么样的任务是需要并行/并发的？它们应该如何实现？\"","text":"\"什么样的任务是需要并行/并发的？它们应该如何实现？\" 如何写并发程序 高性能计算 高性能计算HPC “A technology that harnesses the power of supercomputers or computer clusters to solve complex problems requiring massive computation.” (IBM) 主要挑战 计算任务如何分解：计算图需要容易并行化，机器-线程两级任务分解 生产者-消费者解决一切，MPI Parallel and distribution computation: numerical methods 线程间如何通信 通信不仅发生在节点/线程间，还发生在任何共享内存访问 数据中心 数据中心 以数据（存储）为中心 主要挑战PAC：数据要保持一致(Consistency)，服务要时刻保持可用(Availability)，容忍机器离线(Partition tolerance) key-value storage 线程 协程（coroutines）：多个可以保存/恢复的执行流；比线程更轻量（完全没有系统调用，也就没有操作系统的状态） 线程存在的问题：每个线程会占用相当可观的OS资源（linux kernel线程8Kb） 协程存在的问题：当一个协程block的时候，其它协都会阻塞 Go语言","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Synchronization","slug":"CS/os-5-1","date":"2023-06-11T13:52:56.559Z","updated":"2023-06-12T14:35:32.238Z","comments":true,"path":"2023/06/11/CS/os-5-1/","link":"","permalink":"https://andrew-rey.github.io/2023/06/11/CS/os-5-1/","excerpt":"\"如何在多处理器上协同多个线程完成任务\"","text":"\"如何在多处理器上协同多个线程完成任务\" 线程同步 生产者消费者问题 问题描述 （括号问题形式）两个程序producer和consumer，producer打印左括号， consumer打印右括号，打印的括号序列满足 嵌套深度不超过n，等到有空位再打印左括号，等到能匹配才能打印右括号 互斥锁解法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include \"thread.h\"#include \"thread-sync.h\"int n, count = 0;mutex_t lk = MUTEX_INIT();// 先上锁，检查缓冲区是否已满：// 如果满了，则解锁，并重新检查，直到不满足条件；// 如果没有满，则用1个资源填充缓冲区，打印，释放锁。void Tproduce() { while (1) {retry: mutex_lock(&amp;lk); if (count == n) { mutex_unlock(&amp;lk); goto retry; } count++; printf(\"(\"); mutex_unlock(&amp;lk); }}void Tconsume() { while (1) {retry: mutex_lock(&amp;lk); if (count == 0) { mutex_unlock(&amp;lk); goto retry; } count--; printf(\")\"); mutex_unlock(&amp;lk); }}int main(int argc, char *argv[]) { assert(argc == 2); n = atoi(argv[1]); setbuf(stdout, NULL); for (int i = 0; i &lt; 8; i++) { create(Tproduce); create(Tconsume); }} 条件变量 互斥锁是独占的：每个线程都试图去观察缓冲区的资源（锁在争抢的时候不是自旋的，但还是会不断检查缓冲区，浪费CPU资源） 希望在不满足条件时能够“睡眠”：mutex_unlock_and_sleep(&amp;lk)，直到条件可以被满足时，别的线程将自己唤醒wakeup()，并且唤醒后立即获得一把锁 wait(cv,mutex)：调用时保证已经获得了mutex，释放mutex、进入睡眠 signal/notify(cv)：由于此时条件变量cv已经获得了一把锁，如果有线程在等待cv，则唤醒 其中一个 线程 broadcast/notifyAll(cv)：唤醒全部等待cv的线程 一个错误例子：当consumer用signal从等待队列中唤醒某个进程时，可能唤醒的还是consumer 解决办法1：用两个条件变量分别表示唤醒producer还是consumer 解决办法2：将if改为while：当条件不满足时等待锁，被唤醒后 会首先检查当前条件是否被满足，因此跳出while后条件一定满足；将signal改为broadcast：当某个线程条件被满足时，通知所有的线程 12345678910111213141516// 先上锁，检查缓冲区是否满：// 若满，则睡眠等待，直到被唤醒；// 若不满，则打印，唤醒cv，释放锁void Tproduce() { mutex_lock(&amp;lk); if (count == n) cond_wait(&amp;cv, &amp;lk); printf(\"(\"); count++; cond_signal(&amp;cv); mutex_unlock(&amp;lk);}void Tconsume() { mutex_lock(&amp;lk); if (count == 0) cond_wait(&amp;cv, &amp;lk); printf(\")\"); count--; cond_signal(&amp;cv); mutex_unlock(&amp;lk);} 条件变量同步万能模板 12345678910111213// 需要等待条件满足时mutex_lock(&amp;mutex);while (!cond) { wait(&amp;cv, &amp;mutex);}assert(cond);// ...// 互斥锁保证了在此期间条件 cond 总是成立// ...mutex_unlock(&amp;mutex);// 其他线程条件可能被满足时broadcast(&amp;cv); job queue的实现 信号量 哲学家吃饭问题 问题描述 哲学家有时思考有时吃饭，吃饭时必须左右手都拿到筷子才能吃饭，当筷子被别人占有时需要等待，如何同步 万能的信号量：每个线程自己管理自己（分布式同步） 12345678910111213141516mutex_lock(&amp;mutex);// 检查是否两根筷子都没人拿while (!(avail[lhs] &amp;&amp; avail[rhs])) { wait(&amp;cv, &amp;mutex);}// 在锁保护的时候自己拿起两根筷子avail[lhs] = avail[rhs] = false;mutex_unlock(&amp;mutex);// 吃饭// 吃完在锁保护的时候放下筷子mutex_lock(&amp;mutex);avail[lhs] = avail[rhs] = true;// 告诉别人吃完了broadcast(&amp;cv);// 释放锁mutex_unlock(&amp;mutex); 让一个人集中管理筷子-转化为PC问题（master-slave）","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Mutual Exclusion","slug":"CS/os-5","date":"2023-06-11T11:04:57.634Z","updated":"2023-06-11T13:49:27.475Z","comments":true,"path":"2023/06/11/CS/os-5/","link":"","permalink":"https://andrew-rey.github.io/2023/06/11/CS/os-5/","excerpt":"\"计算机的三大浪漫之一\"","text":"\"计算机的三大浪漫之一\" 在共享内存上实现互斥 假设：存在load和store，前者表示只能load看当前变量的值，并且不做任何其他操作；后者表示只能store，不能同时去读 自旋锁spin lock 原子指令lock，在汇编指令的前面加上lock前缀。 如下面的代码：原子地改变addr的值。 12345int xchg(volatile int *addr, int newval){ int result; asm volatile(\"lock xchg %0, %1\": \"+m\"(*addr), \"=a\"(result) : \"1\"(newval)); return result;} 有stdatomic.h（C++） 自旋协议 前提是硬件支持原子操作（原子地读写） 有两把锁，一把公用的锁（A），每个线程有一把私有的锁（Bn） 当某个线程需要访问公用资源的时候，交换公有和私有的锁（此时交换操作是原子的） 交换后其他线程发现公用的锁不是预期值，即使与私有的锁交换，也无法进入临界区 直到线程退出临界区将公用的锁返回 每一个线程内部都有循环判断锁的值的代码 12345678910111213int table = YES;void lock() {retry: int got = xchg(&amp;table, NOPE); if (got == NOPE) // spin goto retry; assert(got == YES);}void unlock() { xchg(&amp;table, YES)} 123int locked = 0;void lock() { while (xchg(&amp;locked, 1)) ; }void unlock() { xchg(&amp;locked, 0); } 其中xchg函数是硬件支持的原子操作（见上方） 操作系统内部保证所有带有lock的指令可以顺序执行，保证执行某个带有lock的指令时，前面所有共享内存是可见的 RISC-V的Load-Reserved/Store-Conditional LR：标记，对共享变量的标记，当共享变量被改变时，标记消失 SC：当标记还在的时候才可以写入 互斥锁Mutex Lock 自旋锁的缺陷 性能问题0：共享变量会触发处理器间的缓存同步，延迟增加 性能问题1：除了进入临界区的线程，其他处理器的线程都在空转；争抢锁的处理器越多，利用率越低 性能问题2：获得自旋锁的线程可能被OS系统切换出去，实现100%的资源浪费（好耶！ 自旋锁的使用场景：操作系统内核的并发数据结构（短临界区） 临界区几乎不拥堵 持有自旋锁时禁止执行流切换 实现长临界区的互斥 由于C代码只能做计算，所以让操作系统来实现 1234// 试图获得 lk，但如果失败，就切换到其他线程syscall(SYSCALL_lock,&amp;lk);// 释放 lk，如果有等待锁的线程就唤醒syscall(SYSCALL_unlock, &amp;lk); OS用自旋锁确保自己读写锁的过程是原子的 Futex=Spin+Mutex(Fast Userspace Mutex) (关于自旋锁的一些分析（有关fast path &amp; slow path）)[https://jyywiki.cn/OS/2022/slides/5.slides#/4/1] futex可以保证绝大多数情况下不进入内核","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Multi-prossesor","slug":"CS/os-3","date":"2023-05-23T02:38:21.000Z","updated":"2023-06-11T05:46:00.728Z","comments":true,"path":"2023/05/23/CS/os-3/","link":"","permalink":"https://andrew-rey.github.io/2023/05/23/CS/os-3/","excerpt":"\"计算机的三大浪漫之一\"","text":"\"计算机的三大浪漫之一\" 多处理器编程 并发 concurrent: existing, happening, or done at the same time. In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome 有共享内存的执行流 执行流有独立的堆栈和寄存器 共享所有的内存（指针可以互相引用） 从状态机视角：每个执行流有独立的stack frames链表，但是共享全局变量和堆。处理器每次选择其中一个执行流执行（状态转移为被执行的执行流以及相应的内存发生改变，其余执行流不变） 最早的并发程序：系统调用的代码（操作系统） jyy的线程库，编译时要加上-lpthread 创建一个线程： 入口函数是fn的线程，立即开始执行 语义：在状态机中新增stack frame链表并初始化为fn(tid) 12345678910void create(void *fn) { assert(tptr - tpool &lt; NTHREAD); *tptr = (struct thread) { .id = tptr - tpool + 1, .status = T_LIVE, .entry = fn, }; pthread_create(&amp;(tptr-&gt;thread), NULL, wrapper, tptr); ++tptr;} 等待线程结束： 等待所有运行线程的fn返回 在有其他线程未执行完时死循环，否则返回（while(other threads not return);） 123456789void join() { for (int i = 0; i &lt; NTHREAD; i++) { struct thread *t = &amp;tpool[i]; if (t-&gt;status == T_LIVE) { pthread_join(t-&gt;thread, NULL); t-&gt;status = T_DEAD; } }} 如何理解【等待】 当某一个状态执行的线程 T1执行join后，后续每一个状态：若处理器选择执行 T1，则回到当前原状态，直到所有其他进程都返回了。 操作系统会自动把不同的线程放在不同的处理器上面，后台运行发现CPU的使用率超过100% 证明线程会共享内存 可以设置全局变量 如果内存是共享的，某个线程改变全局变量时，其他线程都能看到 创建多个线程，线程内去修改或查看全局变量 证明线程可以有独立的堆栈 __thread 可以将变量声明为 thread local 的，线程内部可见 查看创建线程的系统调用 strace clone是用于创建线程的系统调用 原子性：一段代码执行独占整个计算机系统 单处理器多线程：线程运行时可能被中断，切换到另一个线程执行 多处理器多线程：线程并行执行 实现原子化 唔...不理解","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Concurrency Program","slug":"CS/os-4","date":"2023-05-23T02:38:21.000Z","updated":"2023-06-11T05:46:00.729Z","comments":true,"path":"2023/05/23/CS/os-4/","link":"","permalink":"https://andrew-rey.github.io/2023/05/23/CS/os-4/","excerpt":"\"计算机的三大浪漫之一\"","text":"\"计算机的三大浪漫之一\" 如何理解并发程序的执行 也就是画状态机：把所有可能状态都画出来 互斥mutual exclusion： 保证两个代码不能同时执行一段代码 假设基本操作为读写原子的，如何实现共享内存上的互斥 处理器不是原子地处理load和store的 Peterson算法（谦让）","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Program","slug":"CS/os-2","date":"2023-05-17T13:39:19.000Z","updated":"2023-06-11T05:46:00.728Z","comments":true,"path":"2023/05/17/CS/os-2/","link":"","permalink":"https://andrew-rey.github.io/2023/05/17/CS/os-2/","excerpt":"\"计算机的三大浪漫之一\"","text":"\"计算机的三大浪漫之一\" 什么是程序 源代码视角 程序也是状态机（数字系统是状态机，程序运行在数字系统上） C程序也是状态机 应该落实到可执行的语句 状态 = 栈 + 堆（stack frame的列表，每个frame有PC，全局变量） 初始状态：main函数执行的第一条语句，全局变量初始化 迁移：执行一条简单语句（top stack frame的PC的语句），PC++ 函数调用：将栈帧压栈 函数返回：将栈帧出栈 二进制视角 还是状态机，状态 = 内存M + 寄存器R 操作系统上的程序：所有的指令都只能做计算。这些指令无法使程序停下来。(M,R)-&gt;(M',R')，纯计算 调用操作系统syscall：把（M,R）完全交给操作系统，任其修改，OS可以自己决定返回（M',R'），可以实现与操作系统中其他对象的交互：读写文件/操作系统状态，改变进程（运行中的状态机）状态（创建进程，销毁自己） 程序是计算 + syscall 如何在程序的两个视角之间切换 编译器Compiler：源代码S（状态机） -&gt; 二进制代码C（状态机），C = compile(S) 正确的编译（优化）：S与C的可观测行为严格一致（S中不可优化的内容在C中必须一致，包括system calls, volatile, variable loads/stores, termination）。Trivially正确的实现：直接翻译/解释执行S的语义 操作系统中的一般程序 程序 = 计算 -&gt; system -&gt; 计算 -&gt; ... 操作系统收编了所有的软硬件资源，只能用操作系统的允许方式访问系统的对象（能够管理多个状态机） 【面试题】二进制程序状态机的第一条指令是什么（一个简单的Hello World C程序执行的第一条指令在哪里。）：用gdb -&gt; starti，或者查看进程信息info proc {mappings}（因为它也是状态机，所以有OS给的初始状态）（如果想改的话就去改elf二进制文件） 【面试题】main函数在执行前、中、后发生了哪些操作系统的API调用。用trace（linux里面的工具是strace）可以查看system call，当然第一句是execve。本质上所有的程序和HelloWorld类似： 被OS加载：通过另一个进程执行execve设置为初始状态 状态机执行：进程管理（fork, execve, exit, ...），文件/设备管理（open, close, read, write, ...），存储管理（mmap, brk, ...） 直到 _exit(exit_group)退出","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【操作系统】Overview","slug":"CS/os-1","date":"2023-05-16T16:28:22.000Z","updated":"2023-06-11T05:46:00.728Z","comments":true,"path":"2023/05/17/CS/os-1/","link":"","permalink":"https://andrew-rey.github.io/2023/05/17/CS/os-1/","excerpt":"\"计算机三大浪漫之一\"","text":"\"计算机三大浪漫之一\" 什么是操作系统 A body of software, in fact, that is responsible for making it easy to run programs (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that. (OSTEP) 操作系统是如何从一开始变成这样的 三个线索 计算机（硬件） 程序（软件） 操作系统（管理软件的软件） 对单一计算机硬件系统作出抽象、支撑程序执行的软件系统（狭义） 1940s：第一台计算机 计算机系统 = 状态机 标准的Mealy型数字电路（ENIAC-1946-2-14） 延迟线存储器 图灵机 没有操作系统（运行程序需要接线，对，物理意义的接线） 1950s：更快更小的逻辑门，磁芯内存，IO设备（1953年出现中断） 1957：Fortran 操作系统的概念开始形成：管理多个程序依次排队运行的库函数和调度器，需求是多用户排队共享计算机 操作（operate）任务（jobs）的系统（system） 批处理系统 = 程序的自动切换（换卡）+ 库函数API DISK Operating System (DOS)：开始出现设备，文件，任务等对象和API 1960s：集成电路，总线开始出现，更大的内存（支持把多个程序一起放在内存里） 能同时载入多个程序到内存且灵活调度它们的管理程序，包括程序可以调用的API 有了进程（progress）的概念 进程执行IO时，将CPU让给其他进程：在多个地址空间隔离的程序之间切换 既然操作系统可以实现程序的切换，不如让它们能够定时切换 基于中断机制：使程序在执行时，异步地插入函数调用，由操作系统决定（调度策略）是否应该切换到另一个程序执行 Multics(MIT,1965):现代操作系统诞生 1970s+：集成电路空前发展，PC，CISC, 中断，IO，异常，MMU，网络，PASCAL, C 分时系统成熟，UNIX（单用户系统）诞生和完善 1973：管道（对象），信号API，grep（应用程序） 1983：BSD socket（对象） 1984：procfs（对象） UNIX衍生家族：1BSD, GNU, MacOS, Minix, Windows, Linux0.01...","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"}],"author":"Andrew-Rey"},{"title":"【C++编程】类模板","slug":"CS/class-template","date":"2023-02-28T12:21:43.000Z","updated":"2023-03-12T16:59:17.586Z","comments":true,"path":"2023/02/28/CS/class-template/","link":"","permalink":"https://andrew-rey.github.io/2023/02/28/CS/class-template/","excerpt":"\"C++17类模板\"","text":"\"C++17类模板\" 编译器用于创建类的模板: 自动生成类 标准库 类模板不是类, 是创建类的一种方式 实例 编译器从类模板中生成的类, 在第一次使用模板类型声明变量是, 会创建类模板的一个实例, 以后定义同类型的变量时, 会使用已创建的第一个实例. 在创建类模板时, 也可以不同时声明变量. 数据的组织 独立于 对象类型 类模板的定义 1234template&lt;typename T1, typename T2, Type Arg1&gt;class ClassName { // template class definition}; 模板参数 类型参数 typename 实参总是类型: int, float... 非类型参数 Type 实参是整数类型的字面量: 200, 10... 整数常量表达式 指向对象的指针或引用, 函数指针或空指针 模板 实参是类模板的一个实例 在模板定义中, 不需要使用完整的ID, 例如构造函数 ClassName&lt;T1&gt;();可以写成ClassName(); 不过在模板体的外部标识模板, 则必须使用模板ID (即在模板类外定义模板中的成员函数时需要显式写出ID) 一个例子 1234567891011121314151617template&lt;typename T1&gt;class PythonList {private: int len_; int size_; T1* elements_;public: explicit PythonList&lt;T1&gt;(size_t list_len); PythonList&lt;T1&gt;(const PythonList&lt;T1&gt;&amp; python_list); ~PythonList(); T1&amp; operator[](size_t index); const T1&amp; operator[](size_t index) const; PythonList&lt;T1&gt;&amp; operator=(const PythonList&lt;T1&gt;&amp; rhs_list); size_t get_len() const { return len_; } void allocate_double();}; 类模板成员函数的定义 若在模板类的内部定义, 实则为 内联 如何理解该语法 类模板的成员函数的外部定义本身就是函数模板, 即使成员函数不依赖类型参数. 若函数没有在类内定义, 则它需要一个模板定义. 定义函数模板中的参数列表必须与类模板参数列表相同. 例如 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 析构函数template &lt;typename T1&gt;PythonList&lt;T1&gt;::~PythonList&lt;T1&gt;() { delete [] elements_;}// 构造函数template &lt;typename T1&gt;PythonList&lt;T1&gt;::PythonList(size_t list_len) : len_(list_len), size_(FOLD * list_len), elements_(new T1(list_len)) {}template &lt;typename T1&gt;PythonList&lt;T1&gt;::PythonList(const PythonList&lt;T1&gt; &amp;python_list) : PythonList{python_list.len_} { for (size_t i{}; i &lt; len_; ++i) { elements_[i] = python_list.elements_[i]; }}// 下标运算符template &lt;typename T1&gt; T1 &amp;PythonList&lt;T1&gt;::operator[](size_t index) { if (index &gt;= len_) { throw std::out_of_range{\"Index out of range: \" + std::to_string(index)}; } return elements_[index];}template &lt;typename T1&gt;const T1 &amp;PythonList&lt;T1&gt;::operator[](size_t index) const { if (index &gt;= len_) { throw std::out_of_range{\"Index out of range: \" + std::to_string(index)}; } return elements_[index];}// 赋值运算符template &lt;typename T1&gt;PythonList&lt;T1&gt; PythonList&lt;T1&gt;::operator=(const PythonList&lt;T1&gt;&amp; rhs_list) { if (&amp;rhs_list != this) { delete [] elements_; len_ = rhs_list.len_; size_ = rhs_list.size_; elements_ = new T1[len_]; for (size_t i {}; i &lt; size_; ++i) { elements_[i] = rhs_list.elements_[i]; } } return *this;} 第一行说明该函数为模板函数; 在限定成员函数时, 作用域需要带上模板ID 有时候需要提供自己的拷贝构造(或析构), 因为涉及到动态内存分配时, 默认拷贝构造(或析构)有可能会出现负面效应 在赋值重载时, 需要 检查左右操作数是否相等, 否则会释放this指向的对象后再进行复制. 代码重复 在上述的定义中, const的重载和非const的重载模板函数代码重复, 代码重复不利于后续的维护 对抗重复的方法: 函数, 模板, 基类 传统方法: 用const实现非const 1234template &lt;typename T1&gt;T1&amp; PythonList&lt;T1&gt;::operator[](size_t index) { return const_cast&lt;T1&amp;&gt;(static_cast&lt;const PythonList&lt;T1&gt;&amp;&gt;(*this) [index]);} C++17: std::as_const()(utility头文件) 1234template &lt;typename T1&gt;T1&amp; PythonList&lt;T1&gt;::operator[](size_t index) { return const_cast&lt;T1&amp;&gt;(std::as_const(*this)[index]);} 异常安全性 在赋值运算符重载的时候, 由于使用了new, 可能会出现std::bad_alloc异常 在elements_[i] = rhs_list.elements_[i];可能会出现关于类型T1的赋值异常 当声明了noexcept后, 表示代码内部不发生异常, 使得编译器能做更多的优化, 例如大部分析构都隐式声明了noexcept cppreference noexcept 在以上的赋值运算符中使用 复制后交换 定义模板类注意 成员函数模板与类模板的定义放在同一个文件中: 当编译器生成类模板时, 需要去使用函数模板, 所以在使用模板的源文件中, 这些成员函数的定义必须可用. 类模板实例化 1PythonList&lt;double&gt; data {10}; 编译器只编译程序使用的成员函数, 不会为某个模板参数的实例而一次性编译整个类: 例如上述代码编译后的类中只有构造函数和析构函数. 声明对象类型的指针 不会 创建模板实例: PythonList&lt;std::string&gt;* data_p; 非类型的类模板参数 主要用于定义指定容器有效的值, 如数组的维数 非类型参数只能是整数类型 (size_t, long), 枚举类型, 对象的指针或引用, 函数的指针或引用, 类成员的指针 当作常量 1234567template&lt;typename T1, size_t size&gt;class ClassName { // definition};// 还有一些比较无语的template&lt;typename T1, T1 value&gt; ... // 此时T1只能是模板的非类型参数所允许的类型 注意 只有模板参数完全相同的情况下, 编译器才不会再次编译模板类; 任意一个不同, 编译器都会认为是不同的类, 后果是代码膨胀 解决方法 (待定) 模板参数的默认值 与函数的默认参数类似 如果某个模板参数有默认值, 则后续的参数也必须有默认值 如果某个模板参数的实参被省略, 则后续的所有实参也必须省略 不需要在成员函数的模板中指定默认值 1template&lt;typename T1 = int, int value = 10&gt; ... 模板的显式实例化 1template class ClassName&lt;T1, 10, ...&gt; 编译器会从模板中实例化所有的成员函数, 无论是否调用 类模板特化 模板的使用中有时候只对 某些类型 有用, 而不支持其他类型; 因此使用 特化 来处理某些特殊情况. 例如整型变量的相等和浮点型的比较并不相同, 这时可以使用模板的特化来处理. 对于类模板中的成员函数: 如果成员函数是在类模板的外部定义的, 而不是在类模板体中定义的, 则可以提供函数模板的特化 全特化 即规定模板实现的所有模板参数 12template&lt;&gt;class PythonList&lt;const char*&gt;{}; 特化的定义必须放在原有的定义或声明后面. 因为指定了所有参数, 所以是 全特化 偏特化 即只规定模板参数列表中的一部分模板参数 12template&lt;Type value&gt;class PythonList&lt;const char*, value&gt; {}; template后的参数列表包含的是为这个模板特化的实例所指定的参数, 即实例化时需要指定value 模板名后面的尖括号指定原有类模板定义中的参数如何特化. 该参数列表必须与原来未特化的类模板个数相同 指针类型的偏特化 例如下面代码: template的第一个参数仍是T1, 但模板名后面可以跟着T* 12template&lt;typename T1, Type value&gt;class ClassName&lt;T1*, value&gt; {}; 特化的选择 当匹配给定特化的每个实参匹配多个特化时, 编译器会选择 最特殊 的一个特化. 特殊是指有多个匹配, 如果符合A特化, 也符合B特化, 但反过来不行时, 则A比B更特殊 (A含于B) 在类模板中使用static_assert() static_assert()接受两个参数, 第一个参数为false时, 输出第二个参数指定的消息. 第一个实参使用type_traits.h中的模板 type_traits 类模板的友元 对于友元函数和友元类的情况与一般情况相同 模板友元 类模板的参数列表一般包含定义友元模板的所有参数 如果类模板的一些参数在友元模板中没有, 则友元模板的实例会用于类模板的几个实例 普通类若有友元模板, 则友元的每一个实例都是这个类的友元","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"}],"author":"Andrew-Rey"},{"title":"【深度学习】Image Semantic Segmentation based on UNet","slug":"ML/UNet","date":"2022-08-21T02:50:30.000Z","updated":"2023-08-04T17:57:22.183Z","comments":true,"path":"2022/08/21/ML/UNet/","link":"","permalink":"https://andrew-rey.github.io/2022/08/21/ML/UNet/","excerpt":"\"Semantic segmentation of images, use UNet model.\"","text":"\"Semantic segmentation of images, use UNet model.\" Abstract In this project, we realize an basic UNet model and UNet++ model, then we apply them on image semantic segmentation. We show our basic theory of UNet and an improvement of it, and we provide main code of this program. Finally, we give the result of segmentation images, loss-curve and accuracy-curve on both training and validation set. The copyright of this program is owned by our team mentioned on the end of this blog. UNet Structure The paper published in 2015 propose a noval network structure, whose shape is similar with the captal \"U\". The idea comes from FCNN. U-Net is one of the classes of \"Encoder-Decoder\" structure. U-Net Structure The front half of the network is \"encoder\". The input image passes covolutional kernel, and then passes the pooling layer (or other dimension-decreasing layer). The opposite of that is the back part of UNet, the \"decoder\". The input of decoder is a sequence of feature maps with highly contracted pixels. The output of the decoder (or the whole network) is an image with the same shape of input image, where each pixel has its own class. In this project, we decrease the number of convolutional layers so that there are only two convolutional layers in each convolutional kernel as the dataset includes images with shape . Operator Definitions Convolutional Kernel: We define the basic convolutional kernel as follow: 123456789101112self.layer = nn.Sequential( # in_channel, out_channel, kernel_size, stride, padding # batch size * channel * height * weight nn.Conv2d(C_in, C_out, kernel_size=(3, 3), stride=(1, 1), padding=1), # 64 64 128 256 nn.BatchNorm2d(C_out), nn.Dropout(0.2), nn.LeakyReLU(), nn.Conv2d(C_out, C_out, kernel_size=(3, 3), stride=(1, 1), padding=1), # 64 64 128 256 nn.BatchNorm2d(C_out), nn.Dropout(0.5), nn.LeakyReLU(), It includes two convolution operations. Down Sampling Kernel: As for downsampling kernel, we replace conditional pooling layer to convolutional layer with stride equaling to 2, which means the shape will be shrunk to while remaining the same channels. 1234self.Down = nn.Sequential( nn.Conv2d(C, C, kernel_size=(3, 3), stride=(2, 2), padding=1), # 64 64 64 128 nn.LeakyReLU() ) Up Sampling Kernel: The basic structure of up-sampling contains only one convolutional layer with convolutional kernel size and half out-channel. The feature map should pass an interpolation layer before getting into the convolutional layer. 12345678910111213def __init__(self, C): super(UpSampling, self).__init__() # out-channel = 1/2 in-channel self.Up = nn.Conv2d(C, C // 2, kernel_size=(1, 1), stride=(1, 1)) def forward(self, x, r): # neighbor interpolation up = F.interpolate(x, scale_factor=2, mode=\"nearest\") x = self.Up(up) # concatenate the feature map in encoder and # the feature map in corrsponding decoder layer, in channel dimension res = torch.cat((x, r), 1) return res The interpolation mode we choose is \"nearest\". The function torch.cat(dim=1) is used to concatenate two feature maps in channel dimension. Network Definition Based on the operators defined above, we link these blocks together like UNet structure. 123456789101112131415161718192021222324252627def __init__(self): super(UNet, self).__init__() # down sampling self.C1 = Conv(3, 64) self.D1 = DownSampling(64) self.C2 = Conv(64, 128) self.D2 = DownSampling(128) self.C3 = Conv(128, 256) self.D3 = DownSampling(256) self.C4 = Conv(256, 512) self.D4 = DownSampling(512) self.C5 = Conv(512, 1024) # up sampling self.U1 = UpSampling(1024) self.C6 = Conv(1024, 512) self.U2 = UpSampling(512) self.C7 = Conv(512, 256) self.U3 = UpSampling(256) self.C8 = Conv(256, 128) self.U4 = UpSampling(128) self.C9 = Conv(128, 64) self.C10 = torch.nn.Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=1) self.pred = torch.nn.Conv2d(3, 34, kernel_size=(1, 1), stride=(1, 1)) self.Th = torch.nn.Sigmoid() Like U-Net mentioned in that paper, we designed 4 layer deep network. 12345678910111213141516def forward(self, x): # part 1: down sampling, decreasing dimension R1 = self.C1(x) R2 = self.C2(self.D1(R1)) R3 = self.C3(self.D2(R2)) R4 = self.C4(self.D3(R3)) Y1 = self.C5(self.D4(R4)) # part 2: up sampling, connect priori knowledge O1 = self.C6(self.U1(Y1, R4)) O2 = self.C7(self.U2(O1, R3)) O3 = self.C8(self.U3(O2, R2)) O4 = self.C9(self.U4(O3, R1)) # part 3: active function return self.Th(self.pred(self.C10(O4))) As you can see, the difference between U-Net and other networks before U-Net is that U-Net conbines the former information from encoder and current information from decoder. Code During the training process, we want to keep some information of loss values and accuracy values on training set and validation set so that we can analyze the variance. In the function named train(), we take optimizer and loss as two parameters used in training process. The outputs of this function are loss and accuracy on both training set and validation set. If we get the data about training set and validation set, we can draw the curves. If both training and validation loss values decrease during training process, we can conclude that our model converges and does not overfit on training set. The training code is shown as follow: 1234567891011self.model.train()for batch in self.train_loader: batch_num += 1 optimizer.zero_grad() rgbs, segs = batch s, _, m, n = segs.shape segs = torch.reshape(segs, (s, m, n)) pred_segs = self.model(rgbs).to(self.device) loss_val = loss(pred_segs, segs) loss_val.backward() optimizer.step() The data collecting code can be written as follow: Statistic data of training set 1234567891011121314for ... : with torch.no_grad(): if batch_num % 5 == 0: logging.info(f\"batch num {batch_num}, loss {loss_val}\") # delete or add comments when needed train_loss += loss_val # statistic valid classified samples total_pix += s * m * n idx = torch.argmax(pred_segs, dim=1) train_valid_pix += torch.eq(idx, segs).sum().float().item()torch.cuda.empty_cache()epoch_acc = train_valid_pix / total_pixtrain_epoch_loss.append(train_loss / batch_num)train_epoch_acc.append(epoch_acc) Statistic data of validation set 12345678910111213141516self.model.eval()with torch.no_grad(): for valid_batch in self.valid_loader: valid_batch_num += 1 rgbs, segs = valid_batch s, _, m, n = segs.shape segs = torch.reshape(segs, (s, m, n)) pred_segs = self.model(rgbs).to(self.device) loss_val = loss(pred_segs, segs) valid_loss += loss_val valid_total_pix += s * m * n idx = torch.argmax(pred_segs, dim=1) valid_valid_pix += torch.eq(idx, segs).sum().float().item()epoch_acc = valid_valid_pix / valid_total_pixvalid_epoch_loss.append(valid_loss / valid_batch_num)valid_epoch_acc.append(epoch_acc) The point you should pay attention to is that you should use with torch.no_grad() before you do some work that have no relation with training process, otherwise your GPU memory will be full or even overflow. Result After a long time training, we get the satisfying result with U-Net model. Former Model The \"former model\" infers the U-Net model, and you will see we use other upgraded model named \"UNet++\" which will be introduced later. We output the segmentation results and their uncertainties. picture 1 result-UNet Model Upgrade For some reasons, we try another U-Net-like model, Nested UNet, namely UNet++. It has a nested convolutional blocks like a pyramid and there is a chain passing connectivity between each convolutional block every layer. Neseted UNet The black nodes are the same with U-Net model. The green nodes are what Nested UNet newly added. Both green and blue lines are skip pathways that pass connectivities from encoder to decoder. The use of Nested UNet gives us a little improvement on final results. Analysis U-Net We analyze the loss value and accuracy on both training and validation set: unet loss We find that after 100 epochs, the model has not convergenced yet, but the loss on validation decreases to the bottom. unet accuracy From the accuracy curves, we find that both training set and validation set have increasing accuracy, which means our model does not overfit. Nested UNet Meanwhile, we analyze the loss and accuracy of Nested UNet model on both training and validation set. nested loss We find that Nested UNet has a faster convergency speed than UNet. It uses only about 60 epochs. But to our surprise, we find that Neseted UNet overfit after about only 20 epochs because the validation loss does not decrease anymore. nested accuracy The performance on validation accuracy stays the same with UNet model.","categories":[{"name":"ML","slug":"ML","permalink":"https://andrew-rey.github.io/categories/ML/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://andrew-rey.github.io/tags/Deep-Learning/"}]},{"title":"【C++】CMake Tutorial","slug":"CS/cmake","date":"2022-08-10T04:56:16.000Z","updated":"2023-03-01T14:55:52.642Z","comments":true,"path":"2022/08/10/CS/cmake/","link":"","permalink":"https://andrew-rey.github.io/2022/08/10/CS/cmake/","excerpt":"CMake version: 3.x","text":"CMake version: 3.x Command Line 123456789101112131415161718# (configure step) create build dir, and generate build/Makefile -&gt; generate Makefilecmake -B build# (build step) invoke building system and build the project in different OS -&gt; generate executable filecmake --build build -j4# invoke building system to execute target &quot;install&quot;cmake --build build --target install# define configure variables, only use in configure step# use -D# set build type in configure step, the value will remain when invoked the second time unless delete build dircmake -B build -DCMAKE_BUILD_TYPE=Release# Specify generator (generator: generate build system build rule from CMakeLists.txt)# use -G# generator Ninja, faster than Unix Makefile, generate *.ninjacmake -B build -G Ninja CMakeLists.txt add source file (1). single file: main.cpp 1add_executable(main main.cpp) or 12add_executable(main)target_sources(main PUBLIC main.cpp) (2). multiple files: main.cpp | other.cpp | other.h 12add_executable(main)target_sources(main PUBLIC main.cpp other.cpp) or set a new variable 123add_executable(main)set(sources main.cpp other.cpp other.h) # other.h can deletetarget_sources(main PUBLIC $&#123;sources&#125;) or use GLOB to search all files in current dir 123add_executable(main)file(GLOB sources CONFIGURE_DEPENDS *.cpp *.h) # add CONFIGURE_DEPENDS to detect any change when next buildtarget_sources(main PUBLIC $&#123;sources&#125;) when we have a dir structure: 12345mylib +----*.cpp +----*.h*.cpp*.h no need to write all files: 12345# add all file in current dir and mylib diradd_executable(main)aux_source_directory(. sources)aux_source_directory(mylib sources)target_sources(main PUBLIC $&#123;sources&#125;) or use GLOB_RECURSE to find all files recursely: 123add_executable(main)file(GLOB_RECURSE sources CONFIGURE_DEPENDS *.cpp *.h)target_sources(main PUBLIC $&#123;sources&#125;) ERROR: use GLOB_RECURSE will include *.cpp files in build dir. solution: Add all source files in a dir named src Configure variables CMAKE_BUILD_TYPE: type of build, Release, Debug, MinSizeRel and RelWithDebInfo, defualt: none (debug). 1set(CMAKE_BUILD_TYPE Release) set default build type as Release to reach high performance: in the first three lines: 123if (NOT CMAKE_BUILD_TYPE) set(CMAKE_BUILD_TYPE Release)endif() 123456789101112131415# Specify version of cmakecmake_minimum_required(VERSION 3.22)# set c++ standard# don&#x27;t modify CMAKE_CXX_FLAGS to add -std=c++17set(CMAKE_CXX_STANDARD 17)# if use the needed CXX standard defined.set(CMAKE_CXX_STANDARD_REQUIRED ON) # OFF default# prevent features GCC onlyset(CMAKE_CXX_EXTENSIONS OFF)# set project infoproject(project_name LANGUAGES language_list(such as C CXX ASM...)) Linkable library 1add_executable(main mian.cpp mylib.cpp) or generate a static library 12345add_library(mylib STATIC mylib.cpp) # create libmylib.aadd_executable(main main.cpp)target_link_libraries(main PUBLIC mylib) or generate dynamic lib 12345add_library(mylib SHARED mylib.cpp)add_executable(main main.cpp)target_link_libraries(main PUBLIC mylib) or use object lib, no *.a file, let CMake remember which objects files are created 12345add_library(mylib OBJECT mylib.cpp)add_executable(main main.cpp)target_link_libraries(main PUBLIC mylib) 静态库问题: GCC会自行剔除没有引用符号的对象, 此时使用对象库避免, 从而不会自动剔除没引用到的对象文件, 绕开编译器不统一问题. 动态库也可以避免剔除没引用的对象文件, 但引入了运行时链接的麻烦. 1234# no specify variable in add_library()set(BUILD_SHARED_LIBS ON) # default OFFadd_library(mylib mylib.cpp) HINT 静态库常常被认为直接链接到可执行文件上. 因此在动态库中不要链接静态库. 很呆. 地址会变. 当然解决方法是: 要么转化为对象库, 要么让静态库变成地址无关的代码PIC 12345678910# set global propertyset(CMAKE_POSITION_INDEPENDENT_CODE ON)add_library(otherlib STATIC otherlib.cpp)add_library(mylib SHARED mylib.cpp)target_link_libraries(mylib PUBLIC otherlib)add_executable(main main.cpp)target_link_libraries(main PUBLIC mylib) or set local property 123456789# set local propertyadd_library(otherlib STATIC otherlib.cpp)set_property(TARGET otherlib PROPERTY POSITION_INDEPENDENT_CODE ON)add_library(mylib SHARED mylib.cpp)target_link_libraries(mylib PUBLIC otherlib)add_execuable(main main.cpp)target_link_libraries(main PUBLIC mylib) Attributes of objects 设置单属性: set_property(TARGET ... PROPERTY ...); 设置多属性: set_target_properties(file_name PROPERTIES properties_list) HINT: 以上命令在add_executable后有效. 设置全局属性 (改变属性的默认值): set(CMAKE_XXX), 在add_executable前设置. 如果需要在Windows下面使用动态库 (Windows对动态链接不友好), 则需要在定义和声明添加: Deffinition: 123456#include &lt;cstdio&gt;#ifdef _MSC_VER__declspec(dllexport)#endifvoid sayy_hello()&#123;&#125; Declaration: 123456#pragma once#ifdef _MSC_VER__declspec(dllimport)#endifvoid say_hello(); 然后CMakeLists.txt这样写: 12345678# In Main dircmake_minimum_required(VERSION 3.22)add_subdirectory(mylib) # add sub moduleadd_executable(main main.cpp)target_link_libraries(main PUBLIC mylib)# In sub module diradd_library(mylib SHARED mylib.cpp mylib.h) 然后Windows极有可能会报错: 运行时找不到dll; 原因是dll和exe不在同一目录 (Windows只会查找exe所在目录和PATH). - 把dll添加到PATH环境变量 - 或者dll和dll其他的所有依赖dll, 全部拷贝到exe同一目录 这是因为CMake把main放在build下, 而mylib放在build/mylib/mylib.dll 因此重定向输出路径, 改变mylib属性, 让.dll文件输出到 PROJECT_BINARY_DIR 里面. 1set_property(TARGET mylib PROPERTY RUNTIME_OUTPUT_DIRECTORY_(DEBUG | RELEASE | NONE) | ARCHIVE_OUTPUT_DIRECTORY | LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_BINARY_DIR&#125;) Externel library In Linux: feel free to link externel libraries. (/usr/lib/...) But Windows can't. Linux can also include head file directly (/usr/include/...). HINT: CMake 的分隔符永远是 \"/\", 即使是Windows, CMake会自动转化. More general method: 1find_package(package_name REQUIRED) 没听懂, 以后补, 以后也不想补. Variables and Outputs output some log infomation when running cmake -B build, used for debugging. 1message(&quot;log info&quot;) 1message(STATUS &quot;status info&quot;) # -- prefix 1message(WARNING &quot;warning info&quot;) # yellow 123message(SEND_ERROR &quot;error info&quot;) # send error log but continue to runmessage(FATAL_ERROR &quot;error info&quot;) # print error and stop running Variable and Cache 重复执行cmake -B build: 第一次较慢, 将环境的检测存入缓存, 第二次以及以后直接查看缓存内容. 因此某些错误可以通过删除 ./build/CMakeCache.txt解决. 当然也可以删了整个build文件夹重新编译, 慢一点而已.","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"},{"name":"Programming","slug":"Programming","permalink":"https://andrew-rey.github.io/tags/Programming/"}],"author":"Andrew-Rey"},{"title":"【算法】快速傅里叶变换$FFT$","slug":"Algorithm/fft","date":"2022-04-06T08:08:39.000Z","updated":"2023-06-20T03:18:39.171Z","comments":true,"path":"2022/04/06/Algorithm/fft/","link":"","permalink":"https://andrew-rey.github.io/2022/04/06/Algorithm/fft/","excerpt":"\"对称，万变不离其中\"","text":"\"对称，万变不离其中\" 多项式乘积问题 首先来思考这样的一个问题: Question 1 你有两个多项式函数: 应该如何计算它们的乘积? 当然, 我不是说要用笔算的方式, 而是用计算机. 显然这个问题我们在小学二年级就写过的, 当初正在学习\"数据结构\"这门课, 如果没记错, 应该是用链表实现的. 但是, 就算是用链表实现, 那不也是和手算一样的原理吗? 将二者相乘 分配律 合并同类项 例如上面那个例子: solution 1 (???是什么动力让我深夜在这里口算多项式乘法???) 显然, 如果一个 n 次多项式乘上一个 m 次多项式, 在合并同类项前应该有 次多项式, 这谁顶得住? 对于正常人类而言显然顶不住, 对于计算机而言, 时间复杂度是, 也是算比较大的开销了吧. 咋办? 点表示法 开始 有谁规定, 我多项式一定是用系数表示的? 好家伙, 你这样说我就摸不着头脑了, 难道除了系数表示还有其他表示方法吗? 首先, 多项式集合其实是构成了一个线性空间, 也就是说, 任意两个多项式进行线性运算 (加法和数乘) 后, 结果仍然是多项式. 事实上 构成了该空间的一组基, 将函数展开成 Taylor 级数便用了这组基作为基底, 基前面的系数也就是坐标. 其次, 对于一个 n 次多项式而言, 只要我们确定了它的坐标, 就能唯一确定这个多项式. 现在的问题是不知道坐标, 如何确定多项式. 这里的巧妙之处就在于, 多项式函数是一个映射, 对于一个特定的 x, 总是能给出唯一一个值与之对应, 这不就是一个方程吗? 我给你一个 x, 你输出一个值, 同时由于多项式系数全部未知, 这就是一个关于 个系数的方程 显然, 我需要 个不同的点来唯一确定我的系数. 这就是所谓的点表示法. 这样一来, 我们将这 个方程写成矩阵形式: 看到这里我终于理解了为什么在学高等代数时要突然讲一个范德蒙德(Vandermonde)行列式, 也就是这里的 将上述矩阵定义为我们最喜欢的字母. 好, 既然这东西是范德蒙德行列式, 那我们可以知道它行列式不为 0, 也就是说, 这个矩阵是可逆的, 也就是当我们取 个不同点时, 确实是可以使方程组有唯一解, 也就是 个点可以唯一表示一个 n 次多项式. 乘法 问题来了, 如何做乘法? 我们有 n 次多项式和 m 次多项式做乘法, 得到的是一个 次多项式, 那么我们只要找到 个点即可, 也就是只要在 n 次多项式和 m 次多项式中分别找 个点, 这些点的横坐标 x 相等, 再将对应的函数值相乘即可. 进一步 现在, 我们知道了如何用点表示多项式, 以及如何用点表示进行乘法运算. 但是仔细一想, 这种方法需要求解线性方程组, 这里的计算复杂度并不低. 也就是从系数表示法到点表示法的转化过程带来的计算复杂度还是很高的. 有什么方法可以进行简化吗? 先等一等, 我们先来梳理我们用点表示求多项式乘法的思路: MainIdea 将 n 次多项式和 m 次多项式分别从系数表示转化为点表示 对应点相乘 将得到的 个点表示的多项式转化为系数表示 奇偶 先来考虑简单的情况: Question 2 多项式 和多项式 用点表示法相乘 那我们当然是按部就班地进行乘法啦~ - 由于结果是 5 次多项式, 因此对取 5 个点, 对取 5 个点. 取点, 说得轻巧, 做起来倒是挺犹豫的. 取什么样的点能满足要求呢? 或者得寸进尺地说, 什么样的点能让效率更高呢? 注意到二次函数是对称的, 那我们是不是只要取正的 2 个点, 就能知道负的 2 个点, 另外加一个原点? 确实如此. 那三次多项式呢? 照理来说, 我们同样也是只要取一半的点就能知道另一半点的值(这里的\"一半\"针对正负而言), 只不过要在函数值上添加负号, 何必呢? 还不如干脆 提出一个 x, 然后不也变成了二次函数? 事实上, 一般而言, 我们要用点表示法表示多项式, 可以用如下方法: Method1 其中, 表示只含偶次的多项式函数, 表示只含奇次的多项式. 这样, 我们只要在非负轴上取值就可以确定整个多项式, 取点的个数是 原来的一半. 甚至, 这里形成了一个 递归 算法: 分解后的不也是一个关于 x 的多项式吗?! 那我继续啊, 把继续分解啊, 大事化小, 小事化了. 等等! 我们的其实是, 这里每个都是非负的啊. 未来我们只能在非负轴取值了, 也就是说, 分解为偶次多项式后, 递归停止了. 完蛋. 复数域分解 \"山重水复疑无路, 柳暗花明又一村\" 看到标题就已经知道要怎么做了. 既然在实数域上无法继续分解, 那为何不去复数域呢? 在复数域上我们可以快乐地进行递归. 如何个快乐法呢? 我们来细品: 偶次多项式在复平面上的根 为什么突然变成了 求根? 从第二节中\"奇偶\", 我们可以选取对称的点, 来减少选取点的个数(即原来的一半). 接着我们把任意 n 次多项式分解成两个偶次多项式, 偶次多项式的好处在于容易选取对称的点. 但是由于在实数范围内, 在对偶次多项式进行递归时会发生中断, 于是我们扩展至复数域讨论分解. 方便起见: 对于, 我们取作为特征点, 对于, 我们取作为三个特征点, 那对于, 我们应该怎样取点, 抛开不谈, 令, 由 代数基本定理, 该方程在复数域上有 4 个 根, 对于其它偶次多项式我们以此类推. 就这样, 我们找到了一个简单的方法寻找所有需要的点, 进行递归. 单位根 写到这里, 我也感觉有点吃力, 关键是为什么一定就取了令呢? 虽然但是, 确实是所谓的\"方便起见\", 这是因为, 取了\"1\", 我们可以在复平面上的单位圆上讨论这个问题. 在小学二年级我们就知道, 的根可以用我们熟悉的的幂来表示, 即 这些个点在复平面单位圆上 对称分布. 每递归一次, 单位根的数量减少一半, 但保持对称性不变. 确实方便. 快速傅里叶变换(FFT) 终于能正式地介绍世界上最美丽的算法了: 快速傅里叶变换(FFT). FFT解决的是多项式从系数表示到点表示的过程中, 计算复杂度的问题. 框架 分解: 递归: 加和: 返回 时间复杂度为: 一些数学 我们在复数域上考虑, 令 (这是因为, 我们希望多项式在复数域上考虑时, 我们可以在单位圆周上讨论. 其中表示我们取的第 k 个点, 刚好与 是对应的.) 则线性方程组可以化为: 其中 称为离散傅里叶变换矩阵(DFT)显然该矩阵是 对称的 且 可逆, 其逆矩阵为: 并且, 该逆矩阵看起来和原矩阵 一模一样! . 结束了? 当我们乐呵呵地把FFT转化为代码时, 开心的分解多项式, 然后选点, 相乘, 等等! 你还没告诉我, 怎么从点表示转化回系数表示呢! 这就是FFT对称的魅力了. 由点求系数, 不过是矩阵求逆的过程: 显然, 由于DFT和DFT逆矩阵具有相似的形式, 我们完全可以用同一个函数完成快速傅里叶的正反变换!","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/categories/Algorithm/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/tags/Algorithm/"}],"author":"Andrew-Rey"},{"title":"【数学杂记】空间","slug":"Math/space","date":"2022-03-19T17:20:10.000Z","updated":"2023-06-20T03:19:19.855Z","comments":true,"path":"2022/03/20/Math/space/","link":"","permalink":"https://andrew-rey.github.io/2022/03/20/Math/space/","excerpt":"\"内积空间和度量空间有什么区别? Hilbert空间是什么? 它与线性空间的关系是什么?\" \"我已经晕了.\"","text":"\"内积空间和度量空间有什么区别? Hilbert空间是什么? 它与线性空间的关系是什么?\" \"我已经晕了.\" 数域 是包含0, 1的数集, 且对 中任意两个数的加减乘除运算封闭, 则称 是一个数域. 线性空间 在数域的基础上, 我们提出线性空间的概念: 给定数域 , 和集合 . 有如下映射: 且 () 满足八条基本性质, 则称为一个线性空间. 赋范空间 赋范空间是定义在线性空间之上的. 定义在数域 的线性空间 存在如下映射: 且该映射满足: 正定, 齐次, 三角不等式. 则 是一个赋范空间, 其中映射 称为范数. 内积空间 内积空间是定义在线性空间之上的. 定义在数域 的线性空间 存在如下映射: 则 是一个内积空间. 定义了内积后, 我们可以讨论向量 (即线性空间的元素) 间的长度和夹角, 并进一步讨论正交性等. 注意: 内积本身具有自然定义的范数, 即内积可以诱导出范数, , 因此内积空间含于赋范空间. 度量空间 度量空间是某个具有距离函数的集合. 该函数定义的是集合内所有元素的距离, 即集合上的某种度量, 即: 给定集合, 有映射: 满足: [ ] 注意: 此处并未要求线性结构. 注意: 赋范空间一定可以诱导出度量空间, 因此赋范空间含于度量空间 完备空间 完备空间又称 Cauchy 空间. 完备空间是定义在度量空间之上的. 若度量空间 中所有的柯西序列都收敛在 中的一点, 则 是一个完备空间. Hilbert空间 在内积空间的基础上增添完备性条件, 即得到Hilbert空间. 总结 范数运算+向量空间=(线性)赋范空间 (线性)赋范空间 + 内积运算=内积空间 (线性)赋范空间 + 完备性 = Banach 空间 内积空间 + 完备性 = Hilbert 空间 内积空间 + 完备性 + 有限维 = Euclidean 空间 References zhihu: https://www.zhihu.com/question/332144499/answer/731866608 https://www.zhihu.com/question/42312263/answer/699451330 wikipedia: https://en.wikipedia.org/wiki/Complete_metric_space https://en.wikipedia.org/wiki/Metric_space https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Normed_vector_space","categories":[{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/categories/Math/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/tags/Math/"}]},{"title":"【第一篇博客】Hello World","slug":"Life/first","date":"2022-01-11T01:09:04.000Z","updated":"2023-06-20T03:20:22.395Z","comments":true,"path":"2022/01/11/Life/first/","link":"","permalink":"https://andrew-rey.github.io/2022/01/11/Life/first/","excerpt":"Finished! My First Blog! After a long time deploying my blog webpage and a lot of other borthering settings, I finally finished it! I mean, FINALLY!!! :laughing: :laughing: :laughing:","text":"Finished! My First Blog! After a long time deploying my blog webpage and a lot of other borthering settings, I finally finished it! I mean, FINALLY!!! :laughing: :laughing: :laughing: Original Intention Can a programmer has no personal blog? I have seen many blogers writing their own blogs no metter answering a question or just taking notes from time to time on websites such as zhihu and csdn, but among which I prefer is to establish a personal website where I can put my blogs on. So, at first I have no intention about what to do with my site, maybe I just feel that it's really cool to have such a lovely home for oneself to \"lie down and rest\". But when it was finally established by myself, experencing a lot of confusing problems and taking amount of time to debug, I must to say that, I love here, and I believe I will take after it like taking after a baby, a baby who are growing up. :blush: Thanks I would not finish my work without the help of JerryYang, whose helpful blog is the guidance of mine (though there are still some mistakes maybe? :dizzy_face:). Based on it, I have known some basic command with Linux, Git and Github, which is also beneficial for my lessons next term. Except him I want to link some videos there to thank for another ups from bilibili: using hexo to start blog how to writing blogs","categories":[{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/categories/Life/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://andrew-rey.github.io/tags/Blog/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/tags/Life/"}],"author":"Andrew-Rey"}],"categories":[{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/categories/Unity/"},{"name":"Assistant","slug":"Assistant","permalink":"https://andrew-rey.github.io/categories/Assistant/"},{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/categories/VR/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/categories/Unity3D/"},{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"},{"name":"ML","slug":"ML","permalink":"https://andrew-rey.github.io/categories/ML/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/categories/Algorithm/"},{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/categories/Math/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/categories/Life/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/tags/Unity/"},{"name":"PCG","slug":"PCG","permalink":"https://andrew-rey.github.io/tags/PCG/"},{"name":"Terrain","slug":"Terrain","permalink":"https://andrew-rey.github.io/tags/Terrain/"},{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"},{"name":"Assistant","slug":"Assistant","permalink":"https://andrew-rey.github.io/tags/Assistant/"},{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/tags/VR/"},{"name":"c#","slug":"c","permalink":"https://andrew-rey.github.io/tags/c/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/tags/Unity3D/"},{"name":"CharacterController","slug":"CharacterController","permalink":"https://andrew-rey.github.io/tags/CharacterController/"},{"name":"OS","slug":"OS","permalink":"https://andrew-rey.github.io/tags/OS/"},{"name":"NJU","slug":"NJU","permalink":"https://andrew-rey.github.io/tags/NJU/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/tags/Algorithm/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"https://andrew-rey.github.io/tags/Data-Structure/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://andrew-rey.github.io/tags/Deep-Learning/"},{"name":"Programming","slug":"Programming","permalink":"https://andrew-rey.github.io/tags/Programming/"},{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/tags/Math/"},{"name":"Blog","slug":"Blog","permalink":"https://andrew-rey.github.io/tags/Blog/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/tags/Life/"}]}