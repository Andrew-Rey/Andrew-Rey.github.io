{"meta":{"title":"Andrew-Rey","subtitle":"醉后不知天在水，满船清梦压星河","description":"","author":null,"url":"https://Andrew-Rey.github.io","root":"/"},"pages":[{"title":"二十岁的自传","date":"2023-10-31T17:44:21.025Z","updated":"2023-10-31T17:44:21.025Z","comments":true,"path":"about/index.html","permalink":"https://andrew-rey.github.io/about/index.html","excerpt":"","text":"我在十九岁最后两天的时候给自己写了点东西，当时在教室，周围是考研的学长学姐。 现在是二十岁的我，自传嘛，随便写写，但是并不代表对自己的亵渎。 写点什么呢。 弱冠年，本科在读。 二零年毕业于郴州市一中。 高考延期，现在仍然记得高考时的座位靠窗，那天很热。 疫情在高三开始， 高二的回忆是关于粉橙色的夕阳和理综数学， 高一开始当了纪律委员， 夏令营的天很蓝。 初三的风，初二的她，初一的混乱和美术。 县城小学四年，与父骑车游玩， 浑身是泥，不汗不归。 一二年级在积木中度过。 宅居校内，父母为师， 门前青草针叶衫，夜晚是母亲扇风的手。 再往前，记忆只在照片中凝固。 就这样，平常地活着，安然无恙地活着。 当时怎知宇宙之大，也从不担忧人生几何； 现在知道了宇宙的度量，明白了人生几何， 目睹了活着，和死亡，目睹了一个时代的结束。 人体维护的一切，只是将熵增的速率变缓。 但那又怎样。 我欣然接受。 我已经学会了走路，奔跑；说话，呐喊；回忆，思考；见面，告别。 并且我仍然会 奔跑着，呐喊着，思考着，以及告别着。 但无论怎样，请别忘了： 走路，说话，回忆和见面， 也是你的本能。"},{"title":"categories","date":"2023-10-08T07:45:01.957Z","updated":"2023-10-08T07:45:01.957Z","comments":true,"path":"categories/index.html","permalink":"https://andrew-rey.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-15T03:21:23.859Z","updated":"2023-11-15T03:21:23.859Z","comments":true,"path":"css/prism.css","permalink":"https://andrew-rey.github.io/css/prism.css","excerpt":"","text":"/** * prism.js default theme for JavaScript, CSS and HTML * Based on dabblet (http://dabblet.com) * @author Lea Verou */ code[class*=\"language-\"], pre[class*=\"language-\"] { color: black; background: none; text-shadow: 0 1px white; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; word-wrap: normal; line-height: 1.5; -moz-tab-size: 4; -o-tab-size: 4; tab-size: 4; -webkit-hyphens: none; -moz-hyphens: none; -ms-hyphens: none; hyphens: none; } pre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection, code[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection { text-shadow: none; background: #b3d4fc; } pre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection, code[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection { text-shadow: none; background: #b3d4fc; } @media print { code[class*=\"language-\"], pre[class*=\"language-\"] { text-shadow: none; } } /* Code blocks */ pre[class*=\"language-\"] { padding: 1em; margin: .5em 0; overflow: auto; } :not(pre) > code[class*=\"language-\"], pre[class*=\"language-\"] { background: #f5f2f0; } /* Inline code */ :not(pre) > code[class*=\"language-\"] { padding: .1em; border-radius: .3em; white-space: normal; } .token.comment, .token.prolog, .token.doctype, .token.cdata { color: slategray; } .token.punctuation { color: #999; } .token.namespace { opacity: .7; } .token.property, .token.tag, .token.boolean, .token.number, .token.constant, .token.symbol, .token.deleted { color: #905; } .token.selector, .token.attr-name, .token.string, .token.char, .token.builtin, .token.inserted { color: #690; } .token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string { color: #9a6e3a; /* This background color was intended by the author of this theme. */ background: hsla(0, 0%, 100%, .5); } .token.atrule, .token.attr-value, .token.keyword { color: #07a; } .token.function, .token.class-name { color: #DD4A68; } .token.regex, .token.important, .token.variable { color: #e90; } .token.important, .token.bold { font-weight: bold; } .token.italic { font-style: italic; } .token.entity { cursor: help; }"},{"title":"tags","date":"2023-10-08T07:45:01.958Z","updated":"2023-10-08T07:45:01.958Z","comments":true,"path":"tags/index.html","permalink":"https://andrew-rey.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-15T03:32:59.319Z","updated":"2023-11-15T03:32:59.319Z","comments":true,"path":"css/site.css","permalink":"https://andrew-rey.github.io/css/site.css","excerpt":"","text":"p code, li code, h1 code, h2 code, h3 code { display: inline-block; white-space: no-wrap; background: #f6f6f6; font-size: .9em; line-height: 1.5em; color: #464646; border: 1px solid #eeeeee; -webkit-border-radius: 0.4em; -moz-border-radius: 0.4em; -ms-border-radius: 0.4em; -o-border-radius: 0.4em; border-radius: 0.4em; padding: 0 .3em; margin: -1px 0; } .article-content a { color: #21afd3; } .article-content a:hover { color: #ff6557; text-decoration: underline; } @font-face { font-family: 'CaskaydiaCove Nerd Font'; src: url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.eot'); src: url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.eot?#iefix') format('embedded-opentype'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.woff2') format('woff2'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.woff') format('woff'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.ttf') format('truetype'), url('/fonts/subset-CaskaydiaCoveNerdFontComplete-.svg#CaskaydiaCoveNerdFontComplete-') format('svg'); font-weight: normal; font-style: normal; font-display: swap; } code[class*=\"language-\"], pre[class*=\"language-\"] { border-radius: .6em; font-family: 'CaskaydiaCove Nerd Font' !important; } code { font-family: 'CaskaydiaCove Nerd Font' !important; } .article-content { font-family: 'CaskaydiaCove Nerd Font'; } .original { margin: 2em 0 0; padding: .5em 1em; border-left: 3px solid #fbbc97; background-color: #f9f9f9; font-size: 14px; list-style: none; } .footnote-item p { line-height: 0; } .article-content li { line-height: 2em; }"}],"posts":[{"title":"Racket | How to launch a rocket","slug":"PL/Racket-How-to-Launch-a-Rocket","date":"2023-11-11T12:55:57.000Z","updated":"2023-11-12T08:07:33.176Z","comments":true,"path":"2023/11/11/PL/Racket-How-to-Launch-a-Rocket/","link":"","permalink":"https://andrew-rey.github.io/2023/11/11/PL/Racket-How-to-Launch-a-Rocket/","excerpt":"\"...Introductory books on programming tend to contain lots of materials about the authors' favorate application discipline: puzzles, mathematics, physics, music and so on. Such material is natural because programming is obviously useful in all these areas, but it also dstracts from the essential elements of programming. Hence, we have made every attempt to minimize the use of knowledge from other areas so that we can focus on what computer science can teach you about computational problems solving.\"","text":"\"...Introductory books on programming tend to contain lots of materials about the authors' favorate application discipline: puzzles, mathematics, physics, music and so on. Such material is natural because programming is obviously useful in all these areas, but it also dstracts from the essential elements of programming. Hence, we have made every attempt to minimize the use of knowledge from other areas so that we can focus on what computer science can teach you about computational problems solving.\" show an image Zerothly, you want to show your favorate image on the screen, such as the rocket. Firstly, maybe you in your DrRacket but I used to use my VSCode anyway, if you want to show an image, one convinient module is slideshow, just add #lang slideshow in the first line. Secondly, just look up the help manual and find a function called show-pict, which can display and image. Meanwhile, bitmap/file can load an image based on the given string-like path. So just use as what I did: #lang slideshow (show-pict (bitmap/file \"path/to/image\")) Run and you will see: 1699773585285 Yes, and we will launch it into the sky. define a scene Racket provides an empty-scene where we can put our objects on it (of course, out of it is just ok), use empty-scene to define. Now we put our samll rocket overlay it but with a smaller size using scale. Before that, you should (require 2htdp/image) to add package. (require 2htdp/image) (empty-scene 800 600) (overlay (scale 0.2 (bitmap/file \"path/to/image\")) scene) But this expression maybe a little annoyed as the nested and confused expressions. So it's necessary to define some constants and variables. ; constants (define image-scaler .2) (define scene-length 800) (define scene-width 600) (define x-offset 0) (define max-height (/ scene-width 2)) (define min-height (- 0 (/ scene-width 2))) ; variables (define scene (empty-scene scene-length scene-width)) (define rocket (scale image-scaler (bitmap/file \"path/to/image\"))) ; interactions (show-pict (overlay rocket scene)) 1699774549772 Note: the CENTER coordinate is (0, 0) change positions We use overlay/offset to define the relative position on our scene. Insert a xy-pair between rocket and scene to define the rocket's position on scene. If we want show another little different positions, just modify the xy-pair to another values. There we use a function provided by 2htdp/universe named animate, which consumes a function as an variable and apply it to time tick every frame. Inaddition, we prefer to use function to do such work. ; functions (animate (λ (height) (overlay/offset rocket x-offset height scene))) 1699775538374 refine the program Anyway, the rocket can fly safely? But there is a little more problems in our program. the rocket flies out of our scene, should stop when flies too high the rocket flies with a constant speed, should be accelerated the rocket flies start on the scene center, not the land ; add acceleration in our rocket (define acceleration .5) (define (get-height t) (/ (* acceleration (* t t)) 2)) ; stop when reach to the highest use max or min height defined above (define (get-location t) (min (+ min-height (get-height t)) max-height)) ; the finally animation (define (fly-up t) (overlay/offset rocket x-offset (get-location t) scene)) 1699776100626 although you can launch a rocket in some degrees, but however, you learnt nothing. I mean you are just coding but with an image or with a new programming language. The same problems appear when you construct a larger project in your usual life. We not learn functional programming but learn the essential elements of programming, learn the construction of projects and learn how to use these tools to solve computational problems.","categories":[{"name":"Programming Language","slug":"Programming-Language","permalink":"https://andrew-rey.github.io/categories/Programming-Language/"}],"tags":[{"name":"Racket","slug":"Racket","permalink":"https://andrew-rey.github.io/tags/Racket/"},{"name":"Functional Programming","slug":"Functional-Programming","permalink":"https://andrew-rey.github.io/tags/Functional-Programming/"}],"author":"Andrew-Rey"},{"title":"Unity Development | Poem2Scene","slug":"Project/poem2scene","date":"2023-11-05T06:24:17.000Z","updated":"2023-11-10T15:59:32.256Z","comments":true,"path":"2023/11/05/Project/poem2scene/","link":"","permalink":"https://andrew-rey.github.io/2023/11/05/Project/poem2scene/","excerpt":"","text":"vr scenes generation based on poem texts. unity3d based htc vive framework 1699165642361 A simple framework of this project is shown above (maybe the light theme is reccomended to check the diagram). A simple idea is that the generated contents can be divided into layers, and we want to controll the generation processes of layers. Such as we firstly generate terrain layer and define its materials and textures later in biome layer. The benefits is that the layers are generated in a more dynamic way: materials and textures are not specified in advance, but generated according to not only the texts but also the terrain layer. And so as the later layers. terrain default: noise based text: ai based noise based terrain It is known that Perlin noise has a excellent perfromation in terrain/ocean wave/textures generation. And the mainly noise we used in this project is Perlin noise, but we used 2 layers, which can simulate more abundant terrains. The terrain layer generation parameters are shown as follow. // global configuration public const int HeightMapRandomSeed = 1024; public const int HeightMapLength = 256; public static readonly int[] HeightMapSampleFrequencies = &#123;2, 4, 8, 16&#125;; public const float HeightMapScaler = 5f; public const int TerrainLayerLength = 512; public const float TerrainLayerMaxHeight = 1000f; public const string TerrainNodeName = \"TerrainNode\"; public const string TerrainLayerName = \"TerrainLayer\"; For one noise layer case, we use simplex noise based on Perlin noise (namely overlay multiple octaves on the base noise). The result is show in the image. one-layer noise We can see the result is realisitic in a way. However, the problem is that, there are less reasonable places the our world. This generated scene is more \"noise\", but our world has more terrain types such as \"plane\". So we designed a two-layer noises to generate terrain and it has a more reasonable result. Here is the image. two-layer noise For two-layer case, we controll the amplitudes of the \"mountains\" using a strategy (by default, we use 1-frequency and 1-octave Perlin noise). And the variance of terrain is more smooth and more \"not random\". schedule/progress 23-11-07 target: add start ui (simple version: v_1) learn the vr ui use button-click to change scene (from start-scene to main-scene) realize terrain real-time loading define chunks generate base map (defaultly include 16 by 16 chunks) load chunk around the player (load 9 chunks and player is in the center chunk) check per-frame finish MapLoader finish BaseMap modified the map generation steps when firstly load the game, generate whole resources used in the map (height gradient meshes, amplitude gradient mesh, biome, decorations, ...), store them to resource file (why do we use this method -- dynamic loading and promising the continuity between chunks) generate chunks around the player, based on the gradient data if enter a brand new area, load the gradient data and generate chunks 23-11-08 target: continue to complete the MapLoader and BaseMap generate BaseMap and divide it into chunks store data into files clear up thinking base-map has the total attributes of map, including terrain, biome, building and weather properties for the generation of base-map: just generate the related data and store them into files base-map-loader is used to load data and generate details of maps around the player every chunk is a smaller map, which means base-map is a data-struct chunk is also a game object, the parents node of terrain and the decorations on it 23-11-10 target: rewrite TerrainLayer and TerrainNode and HeightMap support chunk-like terrains provide more interfaces to get the middle result or data the whole project is ready to be in a mass... arrange project structure","categories":[{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/categories/Project/"}],"tags":[{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/tags/Project/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/tags/Unity3D/"}],"author":"Andrew-Rey"},{"title":"Full Stack | RuoYi-Vue","slug":"SE/ruoyi-vue","date":"2023-11-04T06:20:10.000Z","updated":"2023-11-04T07:04:03.642Z","comments":true,"path":"2023/11/04/SE/ruoyi-vue/","link":"","permalink":"https://andrew-rey.github.io/2023/11/04/SE/ruoyi-vue/","excerpt":"\"a glance of RuoYi-vue framework\" ref","text":"\"a glance of RuoYi-vue framework\" ref configuration mysql configuration use datagrip, run scrips in sql/*.sql construct tables !!IMPORTANT!! use utf8 when creating your database edit configuration file ruoyi-admin/src/main/resources/application-druid.yml to your database start redis server in cmd: redis-server edit configuration file ruoyi-admin/src/main/resources/application.yml to your server port start back-end in ruoyi-admin/ find RuoYiApplication.java and run it success when visiting http://localhost:8080 1699079331780 start front-end download the dependencies in ruoyi-ui/ npm run dev 1699079479931 success when the validation code image appears -&gt; front-back-end validation code the first interactions between front and back back-end generate a expr: such as 1+1=2 generate 1+1=?@2, where @ divides question and anwser - give 1+1=? to front - store 2 in redis (会给前端传一份以确定是哪个key，放在隐藏域，用户提交表单) - confirm user input and redis anwser front-end cross-field 反向代理，映射到后端 1699081297521 将/dev-api替换为空，再映射到8080 例如：http://localhost:80/dev-api/captchaImage -&gt; http://localhost:8080/captchaImage back-end","categories":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"}],"tags":[{"name":"Full stack","slug":"Full-stack","permalink":"https://andrew-rey.github.io/tags/Full-stack/"},{"name":"Framework","slug":"Framework","permalink":"https://andrew-rey.github.io/tags/Framework/"},{"name":"RuoYi","slug":"RuoYi","permalink":"https://andrew-rey.github.io/tags/RuoYi/"}],"author":"Andrew-Rey"},{"title":"Profile | Welcome","slug":"Life/profile","date":"2023-10-31T16:33:00.000Z","updated":"2023-10-31T17:39:49.894Z","comments":true,"path":"2023/11/01/Life/profile/","link":"","permalink":"https://andrew-rey.github.io/2023/11/01/Life/profile/","excerpt":"Welcome to my Site import seu.chien_shiung_wu as csw profile = csw.register(\"Andrew-Rey\").time(\"2020-9\") profile.study = \"cs-vr\" profile.current_work = [\"poem2scene\"] profile.published = [] # but will be more and more csw.graduate(profile).time(\"2024-6\")","text":"Welcome to my Site import seu.chien_shiung_wu as csw profile = csw.register(\"Andrew-Rey\").time(\"2020-9\") profile.study = \"cs-vr\" profile.current_work = [\"poem2scene\"] profile.published = [] # but will be more and more csw.graduate(profile).time(\"2024-6\") find me on github find me on bilibili","categories":[{"name":"Profile","slug":"Profile","permalink":"https://andrew-rey.github.io/categories/Profile/"}],"tags":[{"name":"welcome","slug":"welcome","permalink":"https://andrew-rey.github.io/tags/welcome/"}],"author":"Andrew-Rey"},{"title":"Paper Reading | Learning Transferable Visual Models From Natural Language Supervision","slug":"Papers/clip-1","date":"2023-10-30T07:58:33.000Z","updated":"2023-10-31T17:43:40.020Z","comments":true,"path":"2023/10/30/Papers/clip-1/","link":"","permalink":"https://andrew-rey.github.io/2023/10/30/Papers/clip-1/","excerpt":"Natural Language Supervision Learning Transferable Visual Models 利用自然语言的监督信号来训练一个泛化性能好的视觉模型","text":"Natural Language Supervision Learning Transferable Visual Models 利用自然语言的监督信号来训练一个泛化性能好的视觉模型 abstract 之前的视觉模型训练：先有一个固定的、提前定义好的物体类别集合，模型去预测这些定义好的类别来完成训练。 收集数据集简单，模型训练简单 有限制的监督信号，限制了模型本身的泛化性 CLIP 直接从自然语言得到监督信号 范围广，语言描述过的物体就可以被识别到 给定一张图片，给定一个句子，判断配对 训练样本是图片和句子的配对 数据集规模：4亿 自监督 多模态的对比学习 自然语言用于引导模型做物体分类(prompt) 能扩展到新的任务 大多数迁移效果好 开源了预训练模型，只公开了推理的代码，未公开预训练代码 my focus text2image Downstream task forzen clip model and train generator encode text text: poems images: height maps, grey-scale","categories":[{"name":"Paper","slug":"Paper","permalink":"https://andrew-rey.github.io/categories/Paper/"}],"tags":[{"name":"clip","slug":"clip","permalink":"https://andrew-rey.github.io/tags/clip/"},{"name":"paper","slug":"paper","permalink":"https://andrew-rey.github.io/tags/paper/"},{"name":"DL","slug":"DL","permalink":"https://andrew-rey.github.io/tags/DL/"},{"name":"Multimodule","slug":"Multimodule","permalink":"https://andrew-rey.github.io/tags/Multimodule/"}],"author":"Andrew-Rey"},{"title":"Design Pattern | Creational","slug":"SE/design-pattern-2","date":"2023-10-15T02:14:10.000Z","updated":"2023-11-12T13:00:35.455Z","comments":true,"path":"2023/10/15/SE/design-pattern-2/","link":"","permalink":"https://andrew-rey.github.io/2023/10/15/SE/design-pattern-2/","excerpt":"使用设计模式是为了可重用代码，让代码更容易被他人理解，保证程序的可靠性和重用性","text":"使用设计模式是为了可重用代码，让代码更容易被他人理解，保证程序的可靠性和重用性 肯特·贝克和沃德·坎宁安：建筑设计思想 -&gt; Smalltalk的图形用户接口生成 Erich Gamma改为适用于软件开发 James Coplien致力于C++开发，Advanced C++ Idioms Gang of Four (Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides) 出版 Design Patterns - Elements of Reusable Object-Oriented Software ref 工厂方法模式 创建对象时，不直接使用new来创建对象，而是使用工厂方法模式 - 程序中使用大量的new时，当某个对象/构造方法发生变化时，难以维护 - 将频繁出现的对象创建，封装到一个工厂类中 简单工厂模式 public class FruitFactory() &#123; public Fruit getFruit(ID id) &#123; if (id == 0) &#123;return new Apple();&#125; if (id == 1) &#123;return new Peach();&#125; ... &#125; &#125; 当调用方添加新对象时，需要 修改 工厂代码 上述代码不符合 开闭原则：对扩展开放，对修改关闭 FruitFactory提供给调用方使用，应该对修改关闭，即不要修改工厂代码 但是提供方可以对扩展开放 工厂方法模式 public abstract class FruitFactory&lt;T extends Fruit> &#123; public abstract T getFruit(); &#125; public class AppleFactory extends FruitFactory&lt;Apple> &#123; @Override public Apple getFruit() &#123; return new Apple(); &#125; &#125; ... 如果新增了新对象，调用方只需要自己添加对应的工厂并继承最高的工厂即可 使用者只需要关心如何使用对象，工厂屏蔽了对象的创建细节 抽象工厂模式 工厂方法模式只适用于简单对象，如果需要许多的产品族时会显得乏力 建造者模式 builder 如果一个对象构造时用的参数过多，可以使用builder优雅地完成构造 public class Student &#123; int id; int age; int grade; String name; String college; String profession; List&lt;String> awards; public Student(int id, int age, int grade, String name, String college, String profession, List&lt;String> awards) &#123; this.id = id; this.age = age; this.grade = grade; this.name = name; this.college = college; this.profession = profession; this.awards = awards; &#125; &#125; 参数错位，构造方法太长 public class Student &#123; ... //一律使用建造者来创建，不对外直接开放 private Student(int id, int age, int grade, String name, String college, String profession, List&lt;String> awards) &#123; ... &#125; public static StudentBuilder builder()&#123; //通过builder方法直接获取建造者 return new StudentBuilder(); &#125; public static class StudentBuilder&#123; //这里就直接创建一个内部类 //Builder也需要将所有的参数都进行暂时保存，所以Student怎么定义的这里就怎么定义 int id; int age; int grade; String name; String college; String profession; List&lt;String> awards; public StudentBuilder id(int id)&#123; //直接调用建造者对应的方法，为对应的属性赋值 this.id = id; return this; //为了支持链式调用，这里直接返回建造者本身，下同 &#125; public StudentBuilder age(int age)&#123; this.age = age; return this; &#125; ... public StudentBuilder awards(String... awards)&#123; this.awards = Arrays.asList(awards); return this; &#125; public Student build()&#123; //最后我们只需要调用建造者提供的build方法即可根据我们的配置返回一个对象 return new Student(id, age, grade, name, college, profession, awards); &#125; &#125; &#125; 最后可以使用链式调用完成对象的创建 public static void main(String[] args) &#123; Student student = Student.builder() //获取建造者 .id(1) //逐步配置各个参数 .age(18) .grade(3) .name(\"小明\") .awards(\"ICPC-ACM 区域赛 金牌\", \"LPL 2022春季赛 冠军\") .build(); //最后直接建造我们想要的对象 &#125; 还包括 协调者模式 单例模式 一个类始终只有一个实例对象/直接使用类的静态方法 饿汉式单例 类加载时将对象创建好 懒汉式单例 延迟加载，需要时才创建 线程不安全 多线程不能保证只创建一次 在创建实例的方法上加锁synchronized（但高并发效率较低） 可以在判断实例是否创建的if语句内加锁 volatile保证线程可见 懒汉式+饿汉式 在懒汉式的内部创建内部类 由静态内部类持有单例对象，根据类加载特性，仅使用外层类时，不会对静态内部类进行初始化 原型模式 原型对象作为模板，通过复制该对象来创建新对象 浅拷贝 基本数据类型将值赋值，引用类型只复制地址，指向的还是原来的对象 深拷贝 拷贝为一个全新的对象 Java拷贝机制 Cloneable接口 重写clone方法 内层对象依然是引用的复制，用==进行地址比较 应该在clone中处理成员变量","categories":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"Java","slug":"Java","permalink":"https://andrew-rey.github.io/tags/Java/"},{"name":"Disgn Pattern","slug":"Disgn-Pattern","permalink":"https://andrew-rey.github.io/tags/Disgn-Pattern/"}],"author":"Andrew-Rey"},{"title":"Design Pattern | OOD","slug":"SE/design-pattern-1","date":"2023-10-14T14:51:29.000Z","updated":"2023-11-12T13:00:19.014Z","comments":true,"path":"2023/10/14/SE/design-pattern-1/","link":"","permalink":"https://andrew-rey.github.io/2023/10/14/SE/design-pattern-1/","excerpt":"项目的可维护性和可复用性，项目规范，团队开发","text":"项目的可维护性和可复用性，项目规范，团队开发 单一职责原则 一个对象应该只包含单一职责，并且该职责被完整地封装在一个类中 - 用于控制类的粒度大小 class People(object): def coding(): pass def riding(): pass def cooking(): pass ... 臃肿：修改任意行为都会修改People类 People拥有 不止一个引起它变化的原因 class Programmer(object): pass class Rider(object): pass class Chef(object): pass 类的 粒度更细，根据不同业务划分，采用单一职责原则，高内聚低耦合 开闭原则 软件实体应当对扩展开放，对修改关闭 - 扩展开放：对提供方而言 - 修改关闭：对调用方而言 from abc import ABCMeta, abstractmethod # define abstract class or interface class IProgrammer(metaclass=ABCMeta): @abstractmethod def coding(): pass class JavaProgrammer(IProgrammer): # override def coding(): java() class PythonProgrammer(IProgrammer): # override def coding(): python() 将不同程序员写代码抽象为一个统一的接口/抽象类，不进行实现 扩展开放：开放了统一的接口coding，不同程序员自由决定如何编程 修改关闭：具体程序员如何重写coding是自己负责，不受别人干扰 里氏替换原则 所有引用基类的地方必须能透明使用其子类的对象（子类能扩展父类的功能） - 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法（既然是继承于父类，子类已经不具有父类的原本行为了，如果有这样的需求，一是可以取消继承，二是可以重新写一个方法） - 子类可以增加自己特有的方法 - 当子类方法重载父类方法时，方法的前置条件（入参）要比父类更加宽松 - 当子类方法重载父类方法时，方法的后置条件（返回值）要比父类更加严格或一样 依赖倒转原则 高层模块不依赖于底层模块，它们都应该依赖抽线。抽象不应依赖于细节，细节应该依赖于抽象 - Spring框架 class UserMapper(object): # use CRUD pass class UserService(object): # use methods in UserMapper user_mapper = UserMapper() class UserController(object): # use methods in UserService user_service = UserService() 上述代码结构好，但是如果底层逻辑（例如UserService）发生改变，则上层逻辑也要跟着改变，层次分明但 耦合度高 from abc import ABCMeta, abstractmethod class UserMapper(metaclass=ABCMeta): # provides abstract interfaces only pass class UserMapperImpl(UserMapper): # implements interfaces of UserMapper pass class UserService(metaclass=ABCMeta): # provides abstract interfaces only pass class UserServiceImpl(UserService): # use dependency injection to instantiate UserMapper such as: self.user_mapper = None def set_user_mapper(user_mapper: UserMapper): pass class UserController(): # use dependency injection to instantiate UserService such as: self.user_service = None def set_user_service(user_service: UserService): pass 如果修改了底层逻辑（例如UserService），只需要修改其实现类（UserServiceImpl）即可，上层逻辑由依赖注入完成 上层只需要知道接口中定义了什么方法然后使用即可，具体操作内容由接口的实现类完成 使用了 依赖注入 降低了类之间的耦合度 接口隔离原则 客户端不应依赖那些它不需要的接口 - 对接口的细化 - 定义接口时要注意接口的粒度 合成复用原则 优先使用对象组合，而不是通过继承来达到复用的目的 - 核心是委派 - 在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新的对象通过向这些对象的委派达到已有功能复用的目的 继承可以实现复用，但 耦合度高 子类得到父类细节（某些字段或方法），不安全 组合实现复用 考虑函数传参，用的时候才传参 考虑成为成员变量，构造时指定 迪米特法则/最少知识原则 每一个软件单位对其它单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位 - 一个模块与其它模块交互越少越好 - 降低耦合度 def main_task(): my_secret = Secret() test = Test() # test_start may need one of the property of Secret test.test_start(my_secret) # in Test def test_start(my_secret: Secret): print(my_secret.sth) test_start参数改为sth: Something减少与其它功能模块的交互","categories":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"Java","slug":"Java","permalink":"https://andrew-rey.github.io/tags/Java/"},{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://andrew-rey.github.io/tags/Design-Pattern/"}],"author":"Andrew-Rey"},{"title":"Full Stack | Quick Start","slug":"SE/full-stack","date":"2023-10-12T10:51:22.000Z","updated":"2023-11-15T03:27:58.385Z","comments":true,"path":"2023/10/12/SE/full-stack/","link":"","permalink":"https://andrew-rey.github.io/2023/10/12/SE/full-stack/","excerpt":"SpringBoot + Vue development JavaEE: SpringBoot + MyBatis Plus Web front end: Vue + ElementUI","text":"SpringBoot + Vue development JavaEE: SpringBoot + MyBatis Plus Web front end: Vue + ElementUI configure environment jdk IDE: JetBrain IDEA auto build tool: maven projects auto build dependencies manegement standard development structure maven usage edit local repo (default is under user dir) (optional) configure mirrors configure self downloaded maven with IDEA 1697109448690 springboot intro framework provided by Pivotal Team convention Over Configuration(约定优于配置) embedded server(Tomcat, Jetty; no war file, just jar) simplify maven configuration pure Java springboot SSM Spring, Spring mvc, MyBatis difficult to configure adv quickly, simplely initialize Springboot IDEA Spring Initializer(maven based infact) fill project information(group id &amp; artifact id) generate project on the web, download it and load in select jdk initialize Springboot choose Maven project choose springboot version 1697114528195 initialize Springboot configure project information 1697114538516 initialize Springboot add dependencies (web app, choose spring web) 1697114557959 coding springboot backend project: receive requests from brower use Components @RestController public class DemoController&#123;&#125; coding springboot add controller member function // https://localhost:8080/demo @GetMapping(\"/demo\") public String demo()&#123; return \"hello world\"; &#125; coding springboot start the project(yes, no additional code in main) 1697116224333 hot deployment normal case: every time you modify the code, restart the project need hot-deployment spring-boot-devtools component listen the variations of classpath, trigger Restart class loader to reload the class not every change needs to restart app (static res, view templates), use spring.devtools.restart.exclude to exclude the dirs/files add dev-tools dependency in pow.xml &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-devtools&lt;/artifactId> &lt;optional>true&lt;/optional> &lt;/dependency> add properties in application.properties spring.devtools.restart.enabled = true spring.devtools.restart.additional-paths = src/main/java spring-devtools.restart.additional.exclude = static/** web development basic request methods: get request: usualy send request using address bar, only for aquiring resources; post request: commit entity to pointed resources, which changes the state or has sideffects on server, more secure (however both unsecure on the view of data transmition, using https to encrypt) entity: usually the object spring-boot-starter-web: springboot provides an integrated frame of mvc, json, tomcat webmvc: basic frame json: data parser tomcat: container dependency auto-configure when ticking spring web &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-web&lt;/artifactId> &lt;/dependency> controller Springboot provides @Controller and @RestController tags receive &amp; handle HTTP requests @Controller tag: when requesting page and data, usually with Thymeleaf template engine (no seperation between front and back ends) @RestController tag: when requesting only data, usually converting object into json formmat in default when return MVC frame 1697121109192 controller receives users' requests, fetches data from model and reture data to view router mapping receive user requests @RequestMapping tag: URL router mapping, defines http request-mapping rule, can be added on controller class or method for class: whole router mapping will add this mapping rule for method: only the method itself properties: value: url path, supports url templates, reg-expr, @RequestMapping(\"/user\") method: http request methods (get, post), also use: @GetMapping, @PostMapping consumes: content-type for requests, e.g. application/json producer: content-type for resposes (html, json) params, headers: requests parameters and requests header parameters passing get parameters, such as http://localhost:8080/demo?nickname=zhangsan passing zhangsan to param: nickname @RequestParam tag: receiving parameters from http requests body or QueryString of url, omitted when request-parameter's name is the same with controller method @PathVariable tag: handle dynamic url, the value of url can be the parameters of controller handler @RequestBody tag: receives parameters from requestBody, handling data such as application/json, application/xml @RestController public class DemoController &#123; @RequestMapping(value=\"/demo\", method=RequestMethod.GET) public String myDemo(String nickname, String phone) &#123; return \"nickname: \" + nickname + \" phone: \" + phone; &#125; &#125; my request: http://localhost:8080/demo?nickname=xr&amp;phone=123 output: 1697123584376 now parameter mapping handles the situation where request-parameters conflict with method parameters @RestController public class DemoController &#123; @RequestMapping(value=\"/demo\", method=RequestMethod.GET) public String myDemo(@RequestParam(\"nickname\", required = false) String nickname, String phone) &#123; return \"nickname: \" + nickname + \" phone: \" + phone; &#125; &#125; static resources visit put self static resources here visit by http://localhost:8080/test.png 1697173796277 modify static path pattern: add spring.mvc.static-path-pattern=/images/** to application.properties upload files front end form modify enctype=\"multipart/form-data\", otherwise can't upload files tomcat limits the size of files by default: single file &lt; 1MB single request &lt; 10MB modify the size spring.servlet.multipart.max-file-size=10MB spring.servlet.multipart.max-request-size=10MB receiver data-type: MultipartFile receiver writing method: transferTo attention: the parameter name should be same with front end form name interceptor situation: use every function after login judge login state in ANY controller -&gt; code repeating extract to intercepter authority checking performance monitoring general behaviour: reading cookie to get user information and put it to request Springboot interface: HandlerInterceptor preHandle postHandle afterCompletion 1697177213073 how to define extend from system HandlerInterceptor override parents' method used, usually preHandle register interceptor // in com.example.demo.interceptor.LonginInterceptor public class LoginInterceptor implements HandlerInterceptor &#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; System.out.println(\"LoginInterceptor\"); return true; &#125; &#125; // in com.example.demo.config.WebConfig public class WebConfig implements WebMvcConfigurer &#123; @Override public void addInterceptors(InterceptorRegistry registry) &#123; // interceptor for the path /user/** registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/user/**\"); &#125; &#125; build RESTful serve framework rule popular website software service framework designing style basic rule, style every URI maps a kind of resource GET for acquiring resources, POST for creating/updating resources, PUT for updating resources, DELETE for deleting resources HTTP method 1697178943507 just a style, not standard requirements HTTP state code 1xx: info 2xx: success 3xx: redirection 4xx: client error 5xx: server error how to write RESTful API use tags for RESTful framework: every address corresponds a resource, so URI is suggested to be no-verb, pure nouns, and these nouns should conrresponds to database's sheet pass parameters using address: @PathVariable in id Swagger generate API document description debugging dynamically configuration: &lt;!--in pow.xml--> &lt;dependency> &lt;groupId>io.springfox&lt;/groupId> &lt;artifactId>springfox-swagger2&lt;/artifactId> &lt;version>2.9.2&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>io.springfox&lt;/groupId> &lt;artifactId>springfox-swagger-ui&lt;/artifactId> &lt;version>2.9.2&lt;/version> &lt;/dependency> spring.mvc.pathmatch.matching-strategy=ant_path_matcher visit: http://localhost:8080/swagger-ui.html use swagger notation(tag) add methods docs swagger tag usage swagger convinent front end developer to look up the apis another important thing: swagger page can send requests to debug the apis recommend springboot 3.0+ is recommended to use springdoc MyBatis Plus (DB configuration) ORM Object relation mapping handle OOP objects -&gt; DB storage or DB storage -&gt; OOP objects 1697182386692 MyBatis: ORM frame MyBatis-Plus: simpified MyBatis use component: mapper db-related operations: in mapper package configuration add dependencies(pow.xml) mybatis-plus mysql connection pool &lt;!-- mybatis-plus dependency--> &lt;dependency> &lt;groupId>org.mybatis.spring.boot&lt;/groupId> &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId> &lt;version>3.0.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>com.baomidou&lt;/groupId> &lt;artifactId>mybatis-plus-boot-starter&lt;/artifactId> &lt;version>3.5.2&lt;/version> &lt;/dependency> &lt;!-- mysql driver--> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>5.1.47&lt;/version> &lt;/dependency> &lt;!-- sql connection pool--> &lt;dependency> &lt;groupId>com.alibaba&lt;/groupId> &lt;artifactId>druid-spring-boot-starter&lt;/artifactId> &lt;version>1.1.20&lt;/version> &lt;/dependency> global configuration(application.properties) spring.datasource.type=com.alibaba.druid.pool.DruidDataSource spring.datasource.driver-class-name=com.mysql.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/mydb?userSSL=false spring.datasource.username=root spring.datasource.password=root mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl create MySQL data DB, schema and Tables 1697187931126 add tags on Activation Class (main class): @MapperScan(\"com.example.demo.mapper\"), scan mapper packages before running create mapper interface, and implemented by MyBatis (use @Mapper tag on the interface, meaning this is a component, it will use Dynamic Proxy to instanciate an object with @Autowired. And all sql sentences are finished by tags) @Mapper public interface UserMapper &#123; // add declarations, impl by Mybatis // query all users // find in user db (named mydb), configured in application.properties @Select(\"select * from user\") public List&lt;User> query(); // return type stand for the number of records be inserted @Insert(\"insert into user values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;gender&#125;)\") public int insert(User user); &#125; for a more simply form, namely use MyBatis-Plus, that's all: attention that the class name should be the same with your database table name, unless you use tags @Mapper public interface UserMapper extends BaseMapper&lt;User> &#123;&#125; use the mapper to edit database data create controller UserController (we have created User entity before) @RestController public class UserController &#123; @Autowired private UserMapper userMapper; @GetMapping(\"/user\") public List&lt;User> query() &#123; return userMapper.query(); &#125; @PostMapping(\"/user\") public String insert(User user) &#123; var state = userMapper.insert(user); if (state &lt;= 0) &#123; return \"insert fail\"; &#125; return \"insert success\"; &#125; &#125; where @Autowired is an injection method, which helps to instanciate UserMapper Axios a frame of front-end requesting - front-end needs data, browser sends HTTP requests to server to fetch data, Vue bonds data - based on Ajax, promise - use XMLHttpRequests to send web requests, convert json data automatically npm install axios 帮助文档 send web requests send GET requests axios.get(&#39;&#x2F;user?ID&#x3D;12345&#39;) .then(function(response) &#123; &#x2F;&#x2F; handle successful situations console.log(response); &#125;) .catch(function(error) &#123; &#x2F;&#x2F; handle failures console.log(error); &#125;) .then(function() &#123; &#x2F;&#x2F; always execute &#125;); &#x2F;&#x2F; the same with: axios.get(&#39;&#x2F;user&#39;, &#123; params: &#123; ID: 12345 &#125; &#125;) .then(function(response) &#123; &#x2F;&#x2F; handle successful situations console.log(response); &#125;) .catch(function(error) &#123; &#x2F;&#x2F; handle failures console.log(error); &#125;) .then(function() &#123; &#x2F;&#x2F; always execute &#125;); send POST requests &#x2F;&#x2F; request body is the second parameter axios.post(&#39;&#x2F;user&#39;, &#123; firstName: &#39;xxx&#39;, lastName: &#39;xxx&#39; &#125;) .then(function(response) &#123; &#x2F;&#x2F; handle successful situations console.log(response); &#125;) .catch(function(error) &#123; &#x2F;&#x2F; handle failures console.log(error); &#125;) .then(function() &#123; &#x2F;&#x2F; always execute &#125;); when to send requests created:function()&#123;&#125;: invoked when creating the components mounted:function()&#123;&#125;: invoked when mounting the components cross-domain usually appears in front-back end separation projects same-origin-policy: the basic and core security function of browsers same-origin, i.e. same-domain, where two page have the same protocol, host and port cross-domain: request url appears when any of protocol, host and port is different from current page url can't read cross-domain cookies can't send Ajax requests to cross-domain addresses authorization to solve cross-domain questions CORS(cross-origin resource sharing): designed by W3C simple requests/complex requests back-end server realize CORS interfaces for single controller: @CrossOrigin for global controler: add configuration class send requests when the component is created: &#x2F;&#x2F; use arrow function: &quot;this&quot; points to parents&#39; &quot;this&quot;, able to visit parameters of parents &quot;tableData&quot; created:function()&#123; axios.get(&quot;http:&#x2F;&#x2F;localhost:8088&#x2F;user&#x2F;findAll&quot;).then((response)&#x3D;&gt;&#123; this.tableData &#x3D; response.data &#125;) &#125;, data() &#123; return &#123; tableData: [] &#125; &#125; set base url axios.defualts.baseURL = 'http://api.com' app.config.globalProperties.$http = axios","categories":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"}],"tags":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"Full Stack","slug":"Full-Stack","permalink":"https://andrew-rey.github.io/tags/Full-Stack/"},{"name":"Springboot","slug":"Springboot","permalink":"https://andrew-rey.github.io/tags/Springboot/"},{"name":"Vue","slug":"Vue","permalink":"https://andrew-rey.github.io/tags/Vue/"}],"author":"Andrew-Rey"},{"title":"Paper Reading | Top Transactions and Top Conferences","slug":"Papers/paper-look-through","date":"2023-10-10T05:36:14.000Z","updated":"2023-10-10T05:53:18.424Z","comments":true,"path":"2023/10/10/Papers/paper-look-through/","link":"","permalink":"https://andrew-rey.github.io/2023/10/10/Papers/paper-look-through/","excerpt":"Summarize some top transactions and conferences in VR (and the related tech) field.","text":"Summarize some top transactions and conferences in VR (and the related tech) field. Top Transactions TOCHI: ACM Transactions on Computer-Human Interaction IJHCS: International Journal of Human Computer Studies TOMCCAP: ACM Transactions on Multimedia Computing, Communications and Application HCI(IJHCI): Human Computer Interaction Top Conferences CSCW: ACM Conference on Computer Supported Cooperative Work and Social Computing ACM CHI: ACM Conference on Human Factors in Computing Systems UbiComp: ACM International Conference on Ubiquitous Computing VR: IEEE Virtual Reality","categories":[{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/categories/VR/"}],"tags":[{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/tags/VR/"},{"name":"paper","slug":"paper","permalink":"https://andrew-rey.github.io/tags/paper/"},{"name":"HCI","slug":"HCI","permalink":"https://andrew-rey.github.io/tags/HCI/"}],"author":"Andrew-Rey"},{"title":"Project | CSW-Microservice","slug":"Project/csw-microservice","date":"2023-10-05T11:56:53.000Z","updated":"2023-11-11T12:54:24.926Z","comments":true,"path":"2023/10/05/Project/csw-microservice/","link":"","permalink":"https://andrew-rey.github.io/2023/10/05/Project/csw-microservice/","excerpt":"\"Microservice platform of Chien-Shiung Wu Colledge\"","text":"\"Microservice platform of Chien-Shiung Wu Colledge\" Requirements 功能性分析 用户权限管理 管理人员权限 普通用户权限 运维人员权限 书院通知管理 发布功能 置顶功能 招聘管理 轮播功能 静态内容展示 书院文化展示（lt最爱） 会议室预约管理 会议室预约时间展示：展示近几天所有会议室的空闲时间、占用时间 会议审核功能：查看审核协议；审核通过/拒绝用户在会议室预约的会议 会议预约功能：填写会议室、使用时间、会议主题、预约人；提供增添预约、删除预约、修改预约、查看预约，撤回预约等功能 大厅座位预约管理 大厅座位空间时间展示：展示座位空间分布 -&gt; 展示某个选中座位的预约时间 座位预约功能：预约时间、预约人 咖啡预约管理 咖啡厅餐品展示 咖啡预约功能：口味选择、预期提取时间、预约人 器材出借管理 器材管理：增删查改，器材描述 器材出借功能：出借人、出借/归还时间、审批人 问题上报管理 问题收集管理：增删查改 问题审批功能：审批人、问题描述、上报人（可选） 操作日志管理 日志查看功能 个人账号管理 个人信息维护 密码管理（修改密码，找回密码） 个人权限维护 个人诚信点管理 非功能性分析 用户界面的具体细节 参照东大信息化（？） 有吴健雄学院的特色 对稳定性要求要高 旧的书院系统容易崩溃 响应时间要尽量快 实际中会经常面对临时预约会议的情况，此时需要快速响应 不存在网上交易平台，但仍然需要保证用户权限的分离和安全性 设计约束 进度约束：本学期结束前有测试版，争取寒假能上线正式版 初步讨论使用maven进行项目管理，Springboot+Vue技术栈（相关版本未定） 相关use case图 预约模块 1696654551214 个人信息管理 1696654600025 问题反馈 1696654633120 浏览模块 1696654672936 1696654662518","categories":[{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/categories/Project/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/tags/Project/"},{"name":"Microservice","slug":"Microservice","permalink":"https://andrew-rey.github.io/tags/Microservice/"}],"author":"Andrew-Rey"},{"title":"Inverse Analysis | Requirements Analysis","slug":"SE/reverse-analysis-0","date":"2023-10-05T07:03:25.000Z","updated":"2023-11-11T12:53:04.717Z","comments":true,"path":"2023/10/05/SE/reverse-analysis-0/","link":"","permalink":"https://andrew-rey.github.io/2023/10/05/SE/reverse-analysis-0/","excerpt":"\"项目负责人对用户需求的理解程度，在很大程度上决定了项目的成败\"","text":"\"项目负责人对用户需求的理解程度，在很大程度上决定了项目的成败\" 需求分析的目的 更好地了解、分析、明确用户需求，并能够准确清晰地以文档形式表达给参与项目开发的每个成员，保证项目开发按照用户需求的方向进行。 需求分析的物质性结果是 软件功能描述书（此外，一般还需要编写用户调查报告和市场调研报告） 需求分析的内容 功能性分析 必须实现哪些功能 向用户提供功能时需要执行的动作 形成软件需求规格说明书 非功能性分析 用户界面具体细节 软件性能、可靠性、响应时间需求 运行环境需求 相关标准、规范 安全需求 架构需求 未来可能的扩充需求 设计约束 进度约束 预算约束 资源约束 其它 需求分析的人员分工 项目管理者：组织 人员与用户进行交流，组织 人员编写项目功能描述书 开发人员：与用户一起进行需求分析 美术和技术骨干代表或者全体成员（与用户讨论）编写项目的功能描述书初稿 相关人员对功能书的初稿进行修改和完善，形成正式文档 用户若有能力，可以参与至功能描述书的编写和修改中 用户调查报告 用户的充分配合，必要时需要对用户进行培训。 调查的形式：发需求调查表、开需求调查座谈会或者现场调研 调查内容 网站当前以及日后可能出现的功能需求 客户对网站的性能(如访问速度)的要求和可靠性的要求 确定网站维护的要求 网站的实际运行环境 网站页面总体风格以及美工效果(必要的时候用户可以提供参考站点或者由公司向用户提供) 主页面和次级页面数量，是否需要多种语言版本等 内容管理及录入任务的分配 各种页面特殊效果及其数量(js，flash等) 项目完成时间及进度(可以根据合同) 明确项目完成后的维护责任 调查报告的重点内容 调查概要说明：网站项目的名称;用户单位;参与调查人员;调查开始终止的时间;调查的工作安排。 调查内容说明：用户的基本情况;用户的主要业务;信息化建设现状;网站当前和将来潜在的功能需求、性能需求、可靠性需求、实际运行环境;用户对新网站的期望等。 调查资料汇编：将调查得到的资料分类汇总(如调查问卷，会议记录等等) 市场调研报告 市场调研的目的：清晰地分析相似网站的性能和运行情况，帮助项目负责人清楚地构想出自己开发的网站的大体架构和模样，总结同类网站优势和缺点；明确并引导用户需求 应尽可能调研到所有比较出名或优秀的同类网站，了解同类网站的使用环境和用户的诧异点。 调研内容 市场中同类网站作品的确定。 调研作品的使用范围和访问人群。 调研产品的功能设计(主要模块构成，特色功能，性能情况等等) 简单评价所调研的网站情况。 调研报告的重点内容 调研概要说明：调研计划;网站项目名称、调研单位、参与调研、调研开始终止时间。 调研内容说明：调研的同类网站作品名称、网址、设计公司、网站相关说明、开发背景、主要适用访问对象、功能描述、评价等项目管理者联盟 可采用借鉴的调研网站的功能设计：功能描述、用户界面、性能需求、可采用的原因。 不可采用借鉴的调研网站的功能设计：功能描述、用户界面、性能需求、不可采用的原因。 分析同类网站作品和主要竞争对手产品的弱点和缺陷以及本公司产品在这些方面的优势。 调研资料汇编：将调研得到的资料进行分类汇总。 软件功能描述书 描述书的重点内容 网站功能 网站用户界面(初步) 网站运行的软硬件环境 网站系统性能定义 网站系统的软件和硬件接口 确定网站维护的要求 确定网站系统空间租赁要求 网站页面总体风格及美工效果。 主页面及次页面大概数量。 管理及内容录入任务分配。 各种页面特殊效果及其数量。 项目完成时间及进度(根据合同) 明确项目完成后的维护责任。","categories":[{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"reverse analysis","slug":"reverse-analysis","permalink":"https://andrew-rey.github.io/tags/reverse-analysis/"}],"author":"Andrew-Rey"},{"title":"PCG | Perlin Noise","slug":"Math/PerlinNoise","date":"2023-09-20T16:25:23.000Z","updated":"2023-11-11T12:51:12.195Z","comments":true,"path":"2023/09/21/Math/PerlinNoise/","link":"","permalink":"https://andrew-rey.github.io/2023/09/21/Math/PerlinNoise/","excerpt":"“程序化内容生成——地形/材质等的程序化生成” ——关于一些剑走偏锋的项目历程","text":"“程序化内容生成——地形/材质等的程序化生成” ——关于一些剑走偏锋的项目历程 Perlin Noise about the Perlin noise: ref 4 types of noise that are similar and that are often confused with one another classic Perlin noise improved Perlin noise simplex noise valuse noise about the range of Perlin noise: ref // mapping a 2D position to a random number range from -1 to 1 var perlinValue = PerlinNoise(float x, float y); for texture: x, y stand for pixel position, but multiplied by a small number called the frequency Parameters frequency of 2D waves amplitude of 2D waves octaves: the amount of waves to be generated persistence: amount of change in size between one curve and the next offset: provide variation in the output height scale: scaling factor to accentuate the output generated Property if 2 inputs are near to each other, the results of the noise function will be near to each other too. guarantee continuity Generation given a 2D grid as following, the input of Perlin noise is each pixel. 1695262810353 assign each gird point a random constant vector. (note: gridVector[4]) get the vectors pointing from the grid point to the input point(target pixel). (note: inputVector[4]) for each of the 4 corners of the square where the target pixel lies, calculate the dot products: for i in range(4): calculate dot(gridVector[i], inputVector[i]) the dot product means the effects corners value to target pixels 1695264135606 interpolate between those 4 values and the result is the value of the target pixel. difference between Perlin noise and value noise: Perlin noise use dot product between 2 vectors to get 4 corners' values while value noise use a pseudo-random number. Discussion gradient constant vectors why we need permutation table(noted as P) &amp; gradient table(noted as G): P is used to select a random gradient from G. P provides randomness and repeatability(???)4 how to generate a permutation table: the core is double and shuffle. we have known that permutation table is used to select a gradient from gradient table and one gradient is defined by (x,y) (which is the grid point position). so one tuple (x,y) defines one permutation value. so the size of permutation table is \\(len(X)\\times len(Y)\\) (double). to guarantee the randomness, we can do shuffle for \\(0-255\\). the code to generate permutation table is (where \\(len(X) = len(Y)\\)): var permutationTable = new int[2 * len(X)]; for (var i = 0; i &lt; len(X); i += 1) permutationTable[i] = i; permutationTable = Shuffle(permutationTable); for (var i = 0; i &lt; len(X); i += 1) permutationTable[len(X) + i] = permutationTable[i]; // visit the table given (x,y) var valueTopRight = P[P[x+1]+y+1]; var valueTopLeft = P[P[x]+y+1]; var valueBottomRight = P[P[x+1]+y]; var valueBottomLeft = P[P[x]+y]; how to generate a gradient table: use 4 constant vectors: \\((1f,1f), (1f, -1f), (-1f, 1f), (-1f, -1f)\\). so just do modulo with the permutation value given (x,y) can get one gradient vector. Vector2 GetConstantVector(v) &#123; switch v % 4: case 0: return Vector2(1f,1f); case 1: return Vector2(1f,-1f); case 2: return Vector2(-1f,1f); case 3: return Vector2(-1f,-1f); default: throw undefined error; &#125; interpolation how to interpotate between such 4 values: 4 values (a1,a2,b1,b2), firstly interpolate between a1 and a2 which produces v1, secondly interpolate between b1 and b2 which produces v2, finally interpolate v1 and v2 which produces v, the interpolated value. which interpolation function should be used: if we use linear interplation to get our \\(t\\) in \\(v_p = a_1 + t (a_2 - a_1)\\), there will be a \"hard transition\" between 3 points (x=0,1,2, while y=2,0,1.5) 1695314437553 but if we use an unlinear method, it will be smoothed 1695314441924 the normally used interpolation function is \\(6t^5 - 15t^4 + 10t^3\\), the image is: 1695314653794 frequency what dose frequency means in Perlin noise: consider this situation: what is the interpolate value when our target pixel happens to be the bottom left grid point? ZERO. because the inputVector is zero and thus all dot products are zero. to solve ths issue, we generallt multiply the inputs target pixel by a small value called frequency. amplitude what dose amplitude means in Perlin noise: this will be used in following section. amplitude is the multiplier before one item. octave what dose octave means in Perlin noise: this will also be used in following section. when one layer has a frequency that is double the frequency of the previous layer, this layer is called an octave. More? FBM: Fractal brownian motion 1695315613281 obviously, the left is better. the left image uses FBM to simulate the terrains in real world. but...how? 1695317070446 so the high frequencies and low amplitudes generate more details than just one single layer, we can keep changing the frequencies and amplitudes in a for-loop, and add them together.","categories":[{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/categories/Math/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/tags/Unity/"},{"name":"PCG","slug":"PCG","permalink":"https://andrew-rey.github.io/tags/PCG/"},{"name":"Terrain","slug":"Terrain","permalink":"https://andrew-rey.github.io/tags/Terrain/"}]},{"title":"Unity3D | Movements with CharacterController","slug":"Unity/Tutorial-Movement","date":"2023-08-06T11:38:48.000Z","updated":"2023-10-10T05:35:06.330Z","comments":true,"path":"2023/08/06/Unity/Tutorial-Movement/","link":"","permalink":"https://andrew-rey.github.io/2023/08/06/Unity/Tutorial-Movement/","excerpt":"","text":"Character Controller 角色控制器不同于刚体+碰撞体，但角色控制器可以控制角色的移动并进行碰撞检测。不过神奇的地方在于被它绑定的角色并不会受到力的作用，角色只有在 Move函数里面才能进行运动（当然会受到碰撞检测的制约）。然后就基于这个组件做了一个人物移动的demo。 -&gt; 官方文档 场景搭建 scene 模型：Bronya-次生银翼 场景：Unity商店 绑定角色控制器 添加Physics/Character Controller组件，调整大小和位置，使其刚好包围人的主体部分。 1691338767159 绑定玩家输入 这里要使用键盘AWSD作为人物walk的输入，按住shift以后改为run。输入的管理使用InputSystem插件。 创建Input Action文件 创建动作映射： Action map -&gt; Actions -&gt; Action Propertites / Binding Propertites 1691339763299 自动生成C#文件（放在scripts目录下面），里面自动生成以上的映射关系，在其它地方使用时需要 Import UnityEngine.InputSystem 角色移动 接下来自己创建一个用于角色动作控制的脚本 创建好以后是如下形式的 using UnityEngine; namespace Bronya &#123; public class BronyaActionController : MonoBehaviour &#123; &#x2F;&#x2F; Start is called before the first frame update private void Start() &#123; &#125; &#x2F;&#x2F; Update is called once per frame private void Update() &#123; &#125; &#125; &#125; 添加成员变量： &#x2F;&#x2F; 创建InputAction的文件名，用于管理角色输入 private BronyaInput _bronyaInput; &#x2F;&#x2F; 角色控制器组件 private CharacterController _characterController; &#x2F;&#x2F; AWSD方向键输入 private Vector2 _movementInput; 在 Awake()函数中实例化上述中的两个成员变量： private void Awake() &#123; _bronyaInput &#x3D; new BronyaInput(); _characterController &#x3D; GetComponent&lt;CharacterController&gt;(); &#125; 并创建enable和disable函数用于控制角色控制器是否启用： private void OnEnable() &#123; _bronyaInput.BronyaActionController.Enable(); &#125; private void OnDisable() &#123; _bronyaInput.BronyaActionController.Disable(); &#125; 行走 行走的实现需要包含速度，方向； 由于用到了InputSystem这个插件，自己实现行走的回调函数 public static void OnWalk(InputAction.CallbackContext context) &#123; // movement input has been normalized MovementInput = context.ReadValue&lt;Vector2>(); IsWalkPressed = MovementInput.x != 0 || MovementInput.y != 0; // assign to walk-variables WalkSpeedVector.x = MovementInput.x * WalkSpeedFactor; WalkSpeedVector.z = MovementInput.y * WalkSpeedFactor; WalkSpeedVector.y = GlobalVariables.ZeroF; &#125; 在Awake函数中绑定回调函数。回调函数中主要是计算角色行走时的速度。 _inputSystem.BronyaActionController.Walk.started += MovementController.OnWalk; _inputSystem.BronyaActionController.Walk.canceled += MovementController.OnWalk; 另外编写控制角色行走的函数MovementHandler()用于帧更新（放在Update()中） private void MovementHandler() &#123; _characterController.Move(MovementController.WalkSpeedVector * Time.deltaTime); &#125; 此时等待Unity编译后可以操控角色行走（移动） 1691924618535 添加动画 下面添加行走动画：首先要找动画资源，拖入unity中修改骨骼为Humanoid（这里略）；其次为角色添加AnimationController，可以发现动画是由状态机控制的，创建初始状态为Idle，再创建新状态为Walk（后续的跑步亦如此） 1691926979364 为状态之间添加上图所示的Transition，三个状态之间的转换用两个布尔型的变量来控制即可 1692006048905 在创建用于控制角色动画的函数 private void AnimationHandler() &#123; var isWalking = _bronya.GetIsWalking(); var isRunning = _bronya.GetIsRunning(); if (_characterController.isGrounded) &#123; if (MovementController.IsWalkPressed &amp;&amp; !isWalking) &#123; _bronya.PlayWalkAnimation(); &#125; else if (!MovementController.IsWalkPressed &amp;&amp; isWalking) &#123; _bronya.StopWalkAnimation(); &#125; if ((MovementController.IsWalkPressed &amp;&amp; MovementController.IsRunPressed) &amp;&amp; !isRunning) &#123; _bronya.PlaRunAnimation(); &#125; else if ((!MovementController.IsWalkPressed || !MovementController.IsRunPressed) &amp;&amp; isRunning) &#123; _bronya.StopRunAnimation(); &#125; &#125; &#125; 相关的角色动作都记录在如下的类中，和上面的移动代码分开管理 namespace Bronya &#123; public class BronyaActionController : MonoBehaviour &#123; private Animator _animator; private int _isWalkingHash; private int _isRunningHash; private void Awake() &#123; _animator = GetComponentInChildren&lt;Animator>(); _isWalkingHash = Animator.StringToHash(\"isWalking\"); _isRunningHash = Animator.StringToHash(\"isRunning\"); &#125; public bool GetIsWalking() &#123; return _animator.GetBool(_isWalkingHash); &#125; public bool GetIsRunning() &#123; return _animator.GetBool(_isRunningHash); &#125; public void PlayWalkAnimation() &#123; _animator.SetBool(_isWalkingHash, true); &#125; public void StopWalkAnimation() &#123; _animator.SetBool(_isWalkingHash, false); &#125; public void PlaRunAnimation() &#123; _animator.SetBool(_isRunningHash, true); &#125; public void StopRunAnimation() &#123; _animator.SetBool(_isRunningHash, false); &#125; &#125; &#125; 目前的移动如下所示 1692012104234 添加转向 可以发现目前的问题是角色不会根据移动的方向进行转向，因此继续添加控制角色转向的代码，如下 private void RotationHandler() &#123; Vector3 lookAtPosition; lookAtPosition.x = MovementController.WalkSpeedVector.x; lookAtPosition.z = MovementController.WalkSpeedVector.z; lookAtPosition.y = GlobalVariables.ZeroF; if (MovementController.IsWalkPressed) &#123; transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(lookAtPosition), MovementController.RotationSpeedFactor); &#125; &#125; 可以看到角色已经可以正常进行转向了 1692012118894 添加重力 但此时还可以发现一个致命问题是角色没有重力 这是因为在CharacterController中控制的物体是不受重力的，需要自己添加向下的力 于是添加GravityHandler如下 private void GravityHandler() &#123; if (_characterController.isGrounded) &#123; MovementController.WalkSpeedVector.y = GlobalVariables.GravityAccelerate; MovementController.RunSpeedVector.y = GlobalVariables.GravityAccelerate; &#125; else &#123; MovementController.WalkSpeedVector.y += GlobalVariables.GravityAccelerate; MovementController.RunSpeedVector.y += GlobalVariables.GravityAccelerate; &#125; &#125; 即：如果此时CharacterController检测到角色与地面有接触时，角色的重力直接等于9.8，方向向下（相当于给角色一个向下的速度，让角色“压”住地面）；如果没有与地面有接触，则不断增加角色的下落速度（模拟自由落体时速度的变化） 跑步 跑步的代码类似与走路，唯一不同之处是我们选择用button来控制角色是否应该开始跑步 角色移动的演示 1692012129227","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/categories/Unity3D/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/tags/Unity3D/"},{"name":"CharacterController","slug":"CharacterController","permalink":"https://andrew-rey.github.io/tags/CharacterController/"}]},{"title":"C++ Programming | class template","slug":"CS/class-template","date":"2023-02-28T12:21:43.000Z","updated":"2023-11-11T12:50:23.626Z","comments":true,"path":"2023/02/28/CS/class-template/","link":"","permalink":"https://andrew-rey.github.io/2023/02/28/CS/class-template/","excerpt":"\"C++17类模板\"","text":"\"C++17类模板\" 编译器用于创建类的模板: 自动生成类 标准库 类模板不是类, 是创建类的一种方式 实例 编译器从类模板中生成的类, 在第一次使用模板类型声明变量是, 会创建类模板的一个实例, 以后定义同类型的变量时, 会使用已创建的第一个实例. 在创建类模板时, 也可以不同时声明变量. 数据的组织 独立于 对象类型 类模板的定义 template&lt;typename T1, typename T2, Type Arg1&gt; class ClassName { // template class definition }; 模板参数 类型参数 typename 实参总是类型: int, float... 非类型参数 Type 实参是整数类型的字面量: 200, 10... 整数常量表达式 指向对象的指针或引用, 函数指针或空指针 模板 实参是类模板的一个实例 在模板定义中, 不需要使用完整的ID, 例如构造函数 ClassName&lt;T1&gt;();可以写成ClassName(); 不过在模板体的外部标识模板, 则必须使用模板ID (即在模板类外定义模板中的成员函数时需要显式写出ID) 一个例子 template&lt;typename T1&gt; class PythonList { private: int len_; int size_; T1* elements_; public: explicit PythonList&lt;T1&gt;(size_t list_len); PythonList&lt;T1&gt;(const PythonList&lt;T1&gt;&amp; python_list); ~PythonList(); T1&amp; operator[](size_t index); const T1&amp; operator[](size_t index) const; PythonList&lt;T1&gt;&amp; operator=(const PythonList&lt;T1&gt;&amp; rhs_list); size_t get_len() const { return len_; } void allocate_double(); }; 类模板成员函数的定义 若在模板类的内部定义, 实则为 内联 如何理解该语法 类模板的成员函数的外部定义本身就是函数模板, 即使成员函数不依赖类型参数. 若函数没有在类内定义, 则它需要一个模板定义. 定义函数模板中的参数列表必须与类模板参数列表相同. 例如 // 析构函数 template &lt;typename T1&gt; PythonList&lt;T1&gt;::~PythonList&lt;T1&gt;() { delete [] elements_; } // 构造函数 template &lt;typename T1&gt; PythonList&lt;T1&gt;::PythonList(size_t list_len) : len_(list_len), size_(FOLD * list_len), elements_(new T1(list_len)) {} template &lt;typename T1&gt; PythonList&lt;T1&gt;::PythonList(const PythonList&lt;T1&gt; &amp;python_list) : PythonList{python_list.len_} { for (size_t i{}; i &lt; len_; ++i) { elements_[i] = python_list.elements_[i]; } } // 下标运算符 template &lt;typename T1&gt; T1 &amp;PythonList&lt;T1&gt;::operator[](size_t index) { if (index &gt;= len_) { throw std::out_of_range{\"Index out of range: \" + std::to_string(index)}; } return elements_[index]; } template &lt;typename T1&gt; const T1 &amp;PythonList&lt;T1&gt;::operator[](size_t index) const { if (index &gt;= len_) { throw std::out_of_range{\"Index out of range: \" + std::to_string(index)}; } return elements_[index]; } // 赋值运算符 template &lt;typename T1&gt; PythonList&lt;T1&gt; PythonList&lt;T1&gt;::operator=(const PythonList&lt;T1&gt;&amp; rhs_list) { if (&amp;rhs_list != this) { delete [] elements_; len_ = rhs_list.len_; size_ = rhs_list.size_; elements_ = new T1[len_]; for (size_t i {}; i &lt; size_; ++i) { elements_[i] = rhs_list.elements_[i]; } } return *this; } 第一行说明该函数为模板函数; 在限定成员函数时, 作用域需要带上模板ID 有时候需要提供自己的拷贝构造(或析构), 因为涉及到动态内存分配时, 默认拷贝构造(或析构)有可能会出现负面效应 在赋值重载时, 需要 检查左右操作数是否相等, 否则会释放this指向的对象后再进行复制. 代码重复 在上述的定义中, const的重载和非const的重载模板函数代码重复, 代码重复不利于后续的维护 对抗重复的方法: 函数, 模板, 基类 传统方法: 用const实现非const template &lt;typename T1&gt; T1&amp; PythonList&lt;T1&gt;::operator[](size_t index) { return const_cast&lt;T1&amp;&gt;(static_cast&lt;const PythonList&lt;T1&gt;&amp;&gt;(*this) [index]); } C++17: std::as_const()(utility头文件) template &lt;typename T1&gt; T1&amp; PythonList&lt;T1&gt;::operator[](size_t index) { return const_cast&lt;T1&amp;&gt;(std::as_const(*this)[index]); } 异常安全性 在赋值运算符重载的时候, 由于使用了new, 可能会出现std::bad_alloc异常 在elements_[i] = rhs_list.elements_[i];可能会出现关于类型T1的赋值异常 当声明了noexcept后, 表示代码内部不发生异常, 使得编译器能做更多的优化, 例如大部分析构都隐式声明了noexcept cppreference noexcept 在以上的赋值运算符中使用 复制后交换 定义模板类注意 成员函数模板与类模板的定义放在同一个文件中: 当编译器生成类模板时, 需要去使用函数模板, 所以在使用模板的源文件中, 这些成员函数的定义必须可用. 类模板实例化 PythonList&lt;double&gt; data {10}; 编译器只编译程序使用的成员函数, 不会为某个模板参数的实例而一次性编译整个类: 例如上述代码编译后的类中只有构造函数和析构函数. 声明对象类型的指针 不会 创建模板实例: PythonList&lt;std::string&gt;* data_p; 非类型的类模板参数 主要用于定义指定容器有效的值, 如数组的维数 非类型参数只能是整数类型 (size_t, long), 枚举类型, 对象的指针或引用, 函数的指针或引用, 类成员的指针 当作常量 template&lt;typename T1, size_t size&gt; class ClassName { // definition }; // 还有一些比较无语的 template&lt;typename T1, T1 value&gt; ... // 此时T1只能是模板的非类型参数所允许的类型 注意 只有模板参数完全相同的情况下, 编译器才不会再次编译模板类; 任意一个不同, 编译器都会认为是不同的类, 后果是代码膨胀 解决方法 (待定) 模板参数的默认值 与函数的默认参数类似 如果某个模板参数有默认值, 则后续的参数也必须有默认值 如果某个模板参数的实参被省略, 则后续的所有实参也必须省略 不需要在成员函数的模板中指定默认值 template&lt;typename T1 = int, int value = 10&gt; ... 模板的显式实例化 template class ClassName&lt;T1, 10, ...&gt; 编译器会从模板中实例化所有的成员函数, 无论是否调用 类模板特化 模板的使用中有时候只对 某些类型 有用, 而不支持其他类型; 因此使用 特化 来处理某些特殊情况. 例如整型变量的相等和浮点型的比较并不相同, 这时可以使用模板的特化来处理. 对于类模板中的成员函数: 如果成员函数是在类模板的外部定义的, 而不是在类模板体中定义的, 则可以提供函数模板的特化 全特化 即规定模板实现的所有模板参数 template&lt;&gt; class PythonList&lt;const char*&gt;{}; 特化的定义必须放在原有的定义或声明后面. 因为指定了所有参数, 所以是 全特化 偏特化 即只规定模板参数列表中的一部分模板参数 template&lt;Type value&gt; class PythonList&lt;const char*, value&gt; {}; template后的参数列表包含的是为这个模板特化的实例所指定的参数, 即实例化时需要指定value 模板名后面的尖括号指定原有类模板定义中的参数如何特化. 该参数列表必须与原来未特化的类模板个数相同 指针类型的偏特化 例如下面代码: template的第一个参数仍是T1, 但模板名后面可以跟着T* template&lt;typename T1, Type value&gt; class ClassName&lt;T1*, value&gt; {}; 特化的选择 当匹配给定特化的每个实参匹配多个特化时, 编译器会选择 最特殊 的一个特化. 特殊是指有多个匹配, 如果符合A特化, 也符合B特化, 但反过来不行时, 则A比B更特殊 (A含于B) 在类模板中使用static_assert() static_assert()接受两个参数, 第一个参数为false时, 输出第二个参数指定的消息. 第一个实参使用type_traits.h中的模板 type_traits 类模板的友元 对于友元函数和友元类的情况与一般情况相同 模板友元 类模板的参数列表一般包含定义友元模板的所有参数 如果类模板的一些参数在友元模板中没有, 则友元模板的实例会用于类模板的几个实例 普通类若有友元模板, 则友元的每一个实例都是这个类的友元","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"}],"author":"Andrew-Rey"},{"title":"DeepLearning | Image Semantic Segmentation based on UNet","slug":"ML/UNet","date":"2022-08-21T02:50:30.000Z","updated":"2023-11-11T12:52:26.884Z","comments":true,"path":"2022/08/21/ML/UNet/","link":"","permalink":"https://andrew-rey.github.io/2022/08/21/ML/UNet/","excerpt":"\"Semantic segmentation of images, use UNet model.\"","text":"\"Semantic segmentation of images, use UNet model.\" Abstract In this project, we realize an basic UNet model and UNet++ model, then we apply them on image semantic segmentation. We show our basic theory of UNet and an improvement of it, and we provide main code of this program. Finally, we give the result of segmentation images, loss-curve and accuracy-curve on both training and validation set. The copyright of this program is owned by our team mentioned on the end of this blog. UNet Structure The paper published in 2015 propose a noval network structure, whose shape is similar with the captal \"U\". The idea comes from FCNN. U-Net is one of the classes of \"Encoder-Decoder\" structure. U-Net Structure The front half of the network is \"encoder\". The input image passes covolutional kernel, and then passes the pooling layer (or other dimension-decreasing layer). The opposite of that is the back part of UNet, the \"decoder\". The input of decoder is a sequence of feature maps with highly contracted pixels. The output of the decoder (or the whole network) is an image with the same shape of input image, where each pixel has its own class. In this project, we decrease the number of convolutional layers so that there are only two convolutional layers in each convolutional kernel as the dataset includes images with shape . Operator Definitions Convolutional Kernel: We define the basic convolutional kernel as follow: self.layer = nn.Sequential( # in_channel, out_channel, kernel_size, stride, padding # batch size * channel * height * weight nn.Conv2d(C_in, C_out, kernel_size=(3, 3), stride=(1, 1), padding=1), # 64 64 128 256 nn.BatchNorm2d(C_out), nn.Dropout(0.2), nn.LeakyReLU(), nn.Conv2d(C_out, C_out, kernel_size=(3, 3), stride=(1, 1), padding=1), # 64 64 128 256 nn.BatchNorm2d(C_out), nn.Dropout(0.5), nn.LeakyReLU(), It includes two convolution operations. Down Sampling Kernel: As for downsampling kernel, we replace conditional pooling layer to convolutional layer with stride equaling to 2, which means the shape will be shrunk to while remaining the same channels. self.Down = nn.Sequential( nn.Conv2d(C, C, kernel_size=(3, 3), stride=(2, 2), padding=1), # 64 64 64 128 nn.LeakyReLU() ) Up Sampling Kernel: The basic structure of up-sampling contains only one convolutional layer with convolutional kernel size and half out-channel. The feature map should pass an interpolation layer before getting into the convolutional layer. def __init__(self, C): super(UpSampling, self).__init__() # out-channel = 1/2 in-channel self.Up = nn.Conv2d(C, C // 2, kernel_size=(1, 1), stride=(1, 1)) def forward(self, x, r): # neighbor interpolation up = F.interpolate(x, scale_factor=2, mode=\"nearest\") x = self.Up(up) # concatenate the feature map in encoder and # the feature map in corrsponding decoder layer, in channel dimension res = torch.cat((x, r), 1) return res The interpolation mode we choose is \"nearest\". The function torch.cat(dim=1) is used to concatenate two feature maps in channel dimension. Network Definition Based on the operators defined above, we link these blocks together like UNet structure. def __init__(self): super(UNet, self).__init__() # down sampling self.C1 = Conv(3, 64) self.D1 = DownSampling(64) self.C2 = Conv(64, 128) self.D2 = DownSampling(128) self.C3 = Conv(128, 256) self.D3 = DownSampling(256) self.C4 = Conv(256, 512) self.D4 = DownSampling(512) self.C5 = Conv(512, 1024) # up sampling self.U1 = UpSampling(1024) self.C6 = Conv(1024, 512) self.U2 = UpSampling(512) self.C7 = Conv(512, 256) self.U3 = UpSampling(256) self.C8 = Conv(256, 128) self.U4 = UpSampling(128) self.C9 = Conv(128, 64) self.C10 = torch.nn.Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=1) self.pred = torch.nn.Conv2d(3, 34, kernel_size=(1, 1), stride=(1, 1)) self.Th = torch.nn.Sigmoid() Like U-Net mentioned in that paper, we designed 4 layer deep network. def forward(self, x): # part 1: down sampling, decreasing dimension R1 = self.C1(x) R2 = self.C2(self.D1(R1)) R3 = self.C3(self.D2(R2)) R4 = self.C4(self.D3(R3)) Y1 = self.C5(self.D4(R4)) # part 2: up sampling, connect priori knowledge O1 = self.C6(self.U1(Y1, R4)) O2 = self.C7(self.U2(O1, R3)) O3 = self.C8(self.U3(O2, R2)) O4 = self.C9(self.U4(O3, R1)) # part 3: active function return self.Th(self.pred(self.C10(O4))) As you can see, the difference between U-Net and other networks before U-Net is that U-Net conbines the former information from encoder and current information from decoder. Code During the training process, we want to keep some information of loss values and accuracy values on training set and validation set so that we can analyze the variance. In the function named train(), we take optimizer and loss as two parameters used in training process. The outputs of this function are loss and accuracy on both training set and validation set. If we get the data about training set and validation set, we can draw the curves. If both training and validation loss values decrease during training process, we can conclude that our model converges and does not overfit on training set. The training code is shown as follow: self.model.train() for batch in self.train_loader: batch_num += 1 optimizer.zero_grad() rgbs, segs = batch s, _, m, n = segs.shape segs = torch.reshape(segs, (s, m, n)) pred_segs = self.model(rgbs).to(self.device) loss_val = loss(pred_segs, segs) loss_val.backward() optimizer.step() The data collecting code can be written as follow: Statistic data of training set for ... : with torch.no_grad(): if batch_num % 5 == 0: logging.info(f\"batch num {batch_num}, loss {loss_val}\") # delete or add comments when needed train_loss += loss_val # statistic valid classified samples total_pix += s * m * n idx = torch.argmax(pred_segs, dim=1) train_valid_pix += torch.eq(idx, segs).sum().float().item() torch.cuda.empty_cache() epoch_acc = train_valid_pix / total_pix train_epoch_loss.append(train_loss / batch_num) train_epoch_acc.append(epoch_acc) Statistic data of validation set self.model.eval() with torch.no_grad(): for valid_batch in self.valid_loader: valid_batch_num += 1 rgbs, segs = valid_batch s, _, m, n = segs.shape segs = torch.reshape(segs, (s, m, n)) pred_segs = self.model(rgbs).to(self.device) loss_val = loss(pred_segs, segs) valid_loss += loss_val valid_total_pix += s * m * n idx = torch.argmax(pred_segs, dim=1) valid_valid_pix += torch.eq(idx, segs).sum().float().item() epoch_acc = valid_valid_pix / valid_total_pix valid_epoch_loss.append(valid_loss / valid_batch_num) valid_epoch_acc.append(epoch_acc) The point you should pay attention to is that you should use with torch.no_grad() before you do some work that have no relation with training process, otherwise your GPU memory will be full or even overflow. Result After a long time training, we get the satisfying result with U-Net model. Former Model The \"former model\" infers the U-Net model, and you will see we use other upgraded model named \"UNet++\" which will be introduced later. We output the segmentation results and their uncertainties. picture 1 result-UNet Model Upgrade For some reasons, we try another U-Net-like model, Nested UNet, namely UNet++. It has a nested convolutional blocks like a pyramid and there is a chain passing connectivity between each convolutional block every layer. Neseted UNet The black nodes are the same with U-Net model. The green nodes are what Nested UNet newly added. Both green and blue lines are skip pathways that pass connectivities from encoder to decoder. The use of Nested UNet gives us a little improvement on final results. Analysis U-Net We analyze the loss value and accuracy on both training and validation set: unet loss We find that after 100 epochs, the model has not convergenced yet, but the loss on validation decreases to the bottom. unet accuracy From the accuracy curves, we find that both training set and validation set have increasing accuracy, which means our model does not overfit. Nested UNet Meanwhile, we analyze the loss and accuracy of Nested UNet model on both training and validation set. nested loss We find that Nested UNet has a faster convergency speed than UNet. It uses only about 60 epochs. But to our surprise, we find that Neseted UNet overfit after about only 20 epochs because the validation loss does not decrease anymore. nested accuracy The performance on validation accuracy stays the same with UNet model.","categories":[{"name":"ML","slug":"ML","permalink":"https://andrew-rey.github.io/categories/ML/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://andrew-rey.github.io/tags/Deep-Learning/"}]},{"title":"C++ Programming | CMake Tutorial","slug":"CS/cmake","date":"2022-08-10T04:56:16.000Z","updated":"2023-11-11T12:50:38.840Z","comments":true,"path":"2022/08/10/CS/cmake/","link":"","permalink":"https://andrew-rey.github.io/2022/08/10/CS/cmake/","excerpt":"CMake version: 3.x","text":"CMake version: 3.x Command Line # (configure step) create build dir, and generate build/Makefile -> generate Makefile cmake -B build # (build step) invoke building system and build the project in different OS -> generate executable file cmake --build build -j4 # invoke building system to execute target \"install\" cmake --build build --target install # define configure variables, only use in configure step # use -D # set build type in configure step, the value will remain when invoked the second time unless delete build dir cmake -B build -DCMAKE_BUILD_TYPE=Release # Specify generator (generator: generate build system build rule from CMakeLists.txt) # use -G # generator Ninja, faster than Unix Makefile, generate *.ninja cmake -B build -G Ninja CMakeLists.txt add source file (1). single file: main.cpp add_executable(main main.cpp) or add_executable(main) target_sources(main PUBLIC main.cpp) (2). multiple files: main.cpp | other.cpp | other.h add_executable(main) target_sources(main PUBLIC main.cpp other.cpp) or set a new variable add_executable(main) set(sources main.cpp other.cpp other.h) # other.h can delete target_sources(main PUBLIC $&#123;sources&#125;) or use GLOB to search all files in current dir add_executable(main) file(GLOB sources CONFIGURE_DEPENDS *.cpp *.h) # add CONFIGURE_DEPENDS to detect any change when next build target_sources(main PUBLIC $&#123;sources&#125;) when we have a dir structure: mylib +----*.cpp +----*.h *.cpp *.h no need to write all files: # add all file in current dir and mylib dir add_executable(main) aux_source_directory(. sources) aux_source_directory(mylib sources) target_sources(main PUBLIC $&#123;sources&#125;) or use GLOB_RECURSE to find all files recursely: add_executable(main) file(GLOB_RECURSE sources CONFIGURE_DEPENDS *.cpp *.h) target_sources(main PUBLIC $&#123;sources&#125;) ERROR: use GLOB_RECURSE will include *.cpp files in build dir. solution: Add all source files in a dir named src Configure variables CMAKE_BUILD_TYPE: type of build, Release, Debug, MinSizeRel and RelWithDebInfo, defualt: none (debug). set(CMAKE_BUILD_TYPE Release) set default build type as Release to reach high performance: in the first three lines: if (NOT CMAKE_BUILD_TYPE) set(CMAKE_BUILD_TYPE Release) endif() # Specify version of cmake cmake_minimum_required(VERSION 3.22) # set c++ standard # don't modify CMAKE_CXX_FLAGS to add -std=c++17 set(CMAKE_CXX_STANDARD 17) # if use the needed CXX standard defined. set(CMAKE_CXX_STANDARD_REQUIRED ON) # OFF default # prevent features GCC only set(CMAKE_CXX_EXTENSIONS OFF) # set project info project(project_name LANGUAGES language_list(such as C CXX ASM...)) Linkable library add_executable(main mian.cpp mylib.cpp) or generate a static library add_library(mylib STATIC mylib.cpp) # create libmylib.a add_executable(main main.cpp) target_link_libraries(main PUBLIC mylib) or generate dynamic lib add_library(mylib SHARED mylib.cpp) add_executable(main main.cpp) target_link_libraries(main PUBLIC mylib) or use object lib, no *.a file, let CMake remember which objects files are created add_library(mylib OBJECT mylib.cpp) add_executable(main main.cpp) target_link_libraries(main PUBLIC mylib) 静态库问题: GCC会自行剔除没有引用符号的对象, 此时使用对象库避免, 从而不会自动剔除没引用到的对象文件, 绕开编译器不统一问题. 动态库也可以避免剔除没引用的对象文件, 但引入了运行时链接的麻烦. # no specify variable in add_library() set(BUILD_SHARED_LIBS ON) # default OFF add_library(mylib mylib.cpp) HINT 静态库常常被认为直接链接到可执行文件上. 因此在动态库中不要链接静态库. 很呆. 地址会变. 当然解决方法是: 要么转化为对象库, 要么让静态库变成地址无关的代码PIC # set global property set(CMAKE_POSITION_INDEPENDENT_CODE ON) add_library(otherlib STATIC otherlib.cpp) add_library(mylib SHARED mylib.cpp) target_link_libraries(mylib PUBLIC otherlib) add_executable(main main.cpp) target_link_libraries(main PUBLIC mylib) or set local property # set local property add_library(otherlib STATIC otherlib.cpp) set_property(TARGET otherlib PROPERTY POSITION_INDEPENDENT_CODE ON) add_library(mylib SHARED mylib.cpp) target_link_libraries(mylib PUBLIC otherlib) add_execuable(main main.cpp) target_link_libraries(main PUBLIC mylib) Attributes of objects 设置单属性: set_property(TARGET ... PROPERTY ...); 设置多属性: set_target_properties(file_name PROPERTIES properties_list) HINT: 以上命令在add_executable后有效. 设置全局属性 (改变属性的默认值): set(CMAKE_XXX), 在add_executable前设置. 如果需要在Windows下面使用动态库 (Windows对动态链接不友好), 则需要在定义和声明添加: Deffinition: #include &lt;cstdio> #ifdef _MSC_VER __declspec(dllexport) #endif void sayy_hello()&#123;&#125; Declaration: #pragma once #ifdef _MSC_VER __declspec(dllimport) #endif void say_hello(); 然后CMakeLists.txt这样写: # In Main dir cmake_minimum_required(VERSION 3.22) add_subdirectory(mylib) # add sub module add_executable(main main.cpp) target_link_libraries(main PUBLIC mylib) # In sub module dir add_library(mylib SHARED mylib.cpp mylib.h) 然后Windows极有可能会报错: 运行时找不到dll; 原因是dll和exe不在同一目录 (Windows只会查找exe所在目录和PATH). - 把dll添加到PATH环境变量 - 或者dll和dll其他的所有依赖dll, 全部拷贝到exe同一目录 这是因为CMake把main放在build下, 而mylib放在build/mylib/mylib.dll 因此重定向输出路径, 改变mylib属性, 让.dll文件输出到 PROJECT_BINARY_DIR 里面. set_property(TARGET mylib PROPERTY RUNTIME_OUTPUT_DIRECTORY_(DEBUG | RELEASE | NONE) | ARCHIVE_OUTPUT_DIRECTORY | LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_BINARY_DIR&#125;) Externel library In Linux: feel free to link externel libraries. (/usr/lib/...) But Windows can't. Linux can also include head file directly (/usr/include/...). HINT: CMake 的分隔符永远是 \"/\", 即使是Windows, CMake会自动转化. More general method: find_package(package_name REQUIRED) 没听懂, 以后补, 以后也不想补. Variables and Outputs output some log infomation when running cmake -B build, used for debugging. message(\"log info\") message(STATUS \"status info\") # -- prefix message(WARNING \"warning info\") # yellow message(SEND_ERROR \"error info\") # send error log but continue to run message(FATAL_ERROR \"error info\") # print error and stop running Variable and Cache 重复执行cmake -B build: 第一次较慢, 将环境的检测存入缓存, 第二次以及以后直接查看缓存内容. 因此某些错误可以通过删除 ./build/CMakeCache.txt解决. 当然也可以删了整个build文件夹重新编译, 慢一点而已.","categories":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"},{"name":"Programming","slug":"Programming","permalink":"https://andrew-rey.github.io/tags/Programming/"}],"author":"Andrew-Rey"},{"title":"Algorithm | FFT","slug":"Algorithm/fft","date":"2022-04-06T08:08:39.000Z","updated":"2023-11-15T04:33:48.976Z","comments":true,"path":"2022/04/06/Algorithm/fft/","link":"","permalink":"https://andrew-rey.github.io/2022/04/06/Algorithm/fft/","excerpt":"\"对称，万变不离其中\"","text":"\"对称，万变不离其中\" 多项式乘积问题 首先来思考这样的一个问题: Question 1 你有两个多项式函数: 应该如何计算它们的乘积? 当然, 我不是说要用笔算的方式, 而是用计算机. 显然这个问题我们在小学二年级就写过的, 当初正在学习\"数据结构\"这门课, 如果没记错, 应该是用链表实现的. 但是, 就算是用链表实现, 那不也是和手算一样的原理吗? 将二者相乘 分配律 合并同类项 例如上面那个例子: solution 1 (???是什么动力让我深夜在这里口算多项式乘法???) 显然, 如果一个 n 次多项式乘上一个 m 次多项式, 在合并同类项前应该有 次多项式, 这谁顶得住? 对于正常人类而言显然顶不住, 对于计算机而言, 时间复杂度是, 也是算比较大的开销了吧. 咋办? 点表示法 开始 有谁规定, 我多项式一定是用系数表示的? 好家伙, 你这样说我就摸不着头脑了, 难道除了系数表示还有其他表示方法吗? 首先, 多项式集合其实是构成了一个线性空间, 也就是说, 任意两个多项式进行线性运算 (加法和数乘) 后, 结果仍然是多项式. 事实上 构成了该空间的一组基, 将函数展开成 Taylor 级数便用了这组基作为基底, 基前面的系数也就是坐标. 其次, 对于一个 n 次多项式而言, 只要我们确定了它的坐标, 就能唯一确定这个多项式. 现在的问题是不知道坐标, 如何确定多项式. 这里的巧妙之处就在于, 多项式函数是一个映射, 对于一个特定的 x, 总是能给出唯一一个值与之对应, 这不就是一个方程吗? 我给你一个 x, 你输出一个值, 同时由于多项式系数全部未知, 这就是一个关于 个系数的方程 显然, 我需要 个不同的点来唯一确定我的系数. 这就是所谓的点表示法. 这样一来, 我们将这 个方程写成矩阵形式: 看到这里我终于理解了为什么在学高等代数时要突然讲一个范德蒙德(Vandermonde)行列式, 也就是这里的 将上述矩阵定义为我们最喜欢的字母. 好, 既然这东西是范德蒙德行列式, 那我们可以知道它行列式不为 0, 也就是说, 这个矩阵是可逆的, 也就是当我们取 个不同点时, 确实是可以使方程组有唯一解, 也就是 个点可以唯一表示一个 n 次多项式. 乘法 问题来了, 如何做乘法? 我们有 n 次多项式和 m 次多项式做乘法, 得到的是一个 次多项式, 那么我们只要找到 个点即可, 也就是只要在 n 次多项式和 m 次多项式中分别找 个点, 这些点的横坐标 x 相等, 再将对应的函数值相乘即可. 进一步 现在, 我们知道了如何用点表示多项式, 以及如何用点表示进行乘法运算. 但是仔细一想, 这种方法需要求解线性方程组, 这里的计算复杂度并不低. 也就是从系数表示法到点表示法的转化过程带来的计算复杂度还是很高的. 有什么方法可以进行简化吗? 先等一等, 我们先来梳理我们用点表示求多项式乘法的思路: MainIdea 将 n 次多项式和 m 次多项式分别从系数表示转化为点表示 对应点相乘 将得到的 个点表示的多项式转化为系数表示 奇偶 先来考虑简单的情况: Question 2 多项式 和多项式 用点表示法相乘 那我们当然是按部就班地进行乘法啦~ - 由于结果是 5 次多项式, 因此对取 5 个点, 对取 5 个点. 取点, 说得轻巧, 做起来倒是挺犹豫的. 取什么样的点能满足要求呢? 或者得寸进尺地说, 什么样的点能让效率更高呢? 注意到二次函数是对称的, 那我们是不是只要取正的 2 个点, 就能知道负的 2 个点, 另外加一个原点? 确实如此. 那三次多项式呢? 照理来说, 我们同样也是只要取一半的点就能知道另一半点的值(这里的\"一半\"针对正负而言), 只不过要在函数值上添加负号, 何必呢? 还不如干脆 提出一个 x, 然后不也变成了二次函数? 事实上, 一般而言, 我们要用点表示法表示多项式, 可以用如下方法: Method1 其中, 表示只含偶次的多项式函数, 表示只含奇次的多项式. 这样, 我们只要在非负轴上取值就可以确定整个多项式, 取点的个数是 原来的一半. 甚至, 这里形成了一个 递归 算法: 分解后的不也是一个关于 x 的多项式吗?! 那我继续啊, 把继续分解啊, 大事化小, 小事化了. 等等! 我们的其实是, 这里每个都是非负的啊. 未来我们只能在非负轴取值了, 也就是说, 分解为偶次多项式后, 递归停止了. 完蛋. 复数域分解 \"山重水复疑无路, 柳暗花明又一村\" 看到标题就已经知道要怎么做了. 既然在实数域上无法继续分解, 那为何不去复数域呢? 在复数域上我们可以快乐地进行递归. 如何个快乐法呢? 我们来细品: 偶次多项式在复平面上的根 为什么突然变成了 求根? 从第二节中\"奇偶\", 我们可以选取对称的点, 来减少选取点的个数(即原来的一半). 接着我们把任意 n 次多项式分解成两个偶次多项式, 偶次多项式的好处在于容易选取对称的点. 但是由于在实数范围内, 在对偶次多项式进行递归时会发生中断, 于是我们扩展至复数域讨论分解. 方便起见: 对于, 我们取作为特征点, 对于, 我们取作为三个特征点, 那对于, 我们应该怎样取点, 抛开不谈, 令, 由 代数基本定理, 该方程在复数域上有 4 个 根, 对于其它偶次多项式我们以此类推. 就这样, 我们找到了一个简单的方法寻找所有需要的点, 进行递归. 单位根 写到这里, 我也感觉有点吃力, 关键是为什么一定就取了令呢? 虽然但是, 确实是所谓的\"方便起见\", 这是因为, 取了\"1\", 我们可以在复平面上的单位圆上讨论这个问题. 在小学二年级我们就知道, 的根可以用我们熟悉的的幂来表示, 即 这些个点在复平面单位圆上 对称分布. 每递归一次, 单位根的数量减少一半, 但保持对称性不变. 确实方便. 快速傅里叶变换(FFT) 终于能正式地介绍世界上最美丽的算法了: 快速傅里叶变换(FFT). FFT解决的是多项式从系数表示到点表示的过程中, 计算复杂度的问题. 框架 分解: 递归: 加和: 返回 时间复杂度为: 一些数学 我们在复数域上考虑, 令 (这是因为, 我们希望多项式在复数域上考虑时, 我们可以在单位圆周上讨论. 其中表示我们取的第 k 个点, 刚好与 是对应的.) 则线性方程组可以化为: 其中 称为离散傅里叶变换矩阵(DFT)显然该矩阵是 对称的 且 可逆, 其逆矩阵为: 并且, 该逆矩阵看起来和原矩阵 一模一样! . 结束了? 当我们乐呵呵地把FFT转化为代码时, 开心的分解多项式, 然后选点, 相乘, 等等! 你还没告诉我, 怎么从点表示转化回系数表示呢! 这就是FFT对称的魅力了. 由点求系数, 不过是矩阵求逆的过程: 显然, 由于DFT和DFT逆矩阵具有相似的形式, 我们完全可以用同一个函数完成快速傅里叶的正反变换!","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/categories/Algorithm/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/tags/Algorithm/"}],"author":"Andrew-Rey"},{"title":"Math in a Mess | Space","slug":"Math/space","date":"2022-03-19T17:20:10.000Z","updated":"2023-11-11T12:51:29.657Z","comments":true,"path":"2022/03/20/Math/space/","link":"","permalink":"https://andrew-rey.github.io/2022/03/20/Math/space/","excerpt":"\"内积空间和度量空间有什么区别? Hilbert空间是什么? 它与线性空间的关系是什么?\" \"我已经晕了.\"","text":"\"内积空间和度量空间有什么区别? Hilbert空间是什么? 它与线性空间的关系是什么?\" \"我已经晕了.\" 数域 是包含0, 1的数集, 且对 中任意两个数的加减乘除运算封闭, 则称 是一个数域. 线性空间 在数域的基础上, 我们提出线性空间的概念: 给定数域 , 和集合 . 有如下映射: 且 () 满足八条基本性质, 则称为一个线性空间. 赋范空间 赋范空间是定义在线性空间之上的. 定义在数域 的线性空间 存在如下映射: 且该映射满足: 正定, 齐次, 三角不等式. 则 是一个赋范空间, 其中映射 称为范数. 内积空间 内积空间是定义在线性空间之上的. 定义在数域 的线性空间 存在如下映射: 则 是一个内积空间. 定义了内积后, 我们可以讨论向量 (即线性空间的元素) 间的长度和夹角, 并进一步讨论正交性等. 注意: 内积本身具有自然定义的范数, 即内积可以诱导出范数, , 因此内积空间含于赋范空间. 度量空间 度量空间是某个具有距离函数的集合. 该函数定义的是集合内所有元素的距离, 即集合上的某种度量, 即: 给定集合, 有映射: 满足: [ ] 注意: 此处并未要求线性结构. 注意: 赋范空间一定可以诱导出度量空间, 因此赋范空间含于度量空间 完备空间 完备空间又称 Cauchy 空间. 完备空间是定义在度量空间之上的. 若度量空间 中所有的柯西序列都收敛在 中的一点, 则 是一个完备空间. Hilbert空间 在内积空间的基础上增添完备性条件, 即得到Hilbert空间. 总结 范数运算+向量空间=(线性)赋范空间 (线性)赋范空间 + 内积运算=内积空间 (线性)赋范空间 + 完备性 = Banach 空间 内积空间 + 完备性 = Hilbert 空间 内积空间 + 完备性 + 有限维 = Euclidean 空间 References zhihu: https://www.zhihu.com/question/332144499/answer/731866608 https://www.zhihu.com/question/42312263/answer/699451330 wikipedia: https://en.wikipedia.org/wiki/Complete_metric_space https://en.wikipedia.org/wiki/Metric_space https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Cauchy_sequence https://en.wikipedia.org/wiki/Normed_vector_space","categories":[{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/categories/Math/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/tags/Math/"}]},{"title":"first blog | Hello World","slug":"Life/first","date":"2022-01-11T01:09:04.000Z","updated":"2023-11-11T12:51:00.082Z","comments":true,"path":"2022/01/11/Life/first/","link":"","permalink":"https://andrew-rey.github.io/2022/01/11/Life/first/","excerpt":"Finished! My First Blog! After a long time deploying my blog webpage and a lot of other borthering settings, I finally finished it! I mean, FINALLY!!! :laughing: :laughing: :laughing:","text":"Finished! My First Blog! After a long time deploying my blog webpage and a lot of other borthering settings, I finally finished it! I mean, FINALLY!!! :laughing: :laughing: :laughing: Original Intention Can a programmer has no personal blog? I have seen many blogers writing their own blogs no metter answering a question or just taking notes from time to time on websites such as zhihu and csdn, but among which I prefer is to establish a personal website where I can put my blogs on. So, at first I have no intention about what to do with my site, maybe I just feel that it's really cool to have such a lovely home for oneself to \"lie down and rest\". But when it was finally established by myself, experencing a lot of confusing problems and taking amount of time to debug, I must to say that, I love here, and I believe I will take after it like taking after a baby, a baby who are growing up. :blush: Thanks I would not finish my work without the help of JerryYang, whose helpful blog is the guidance of mine (though there are still some mistakes maybe? :dizzy_face:). Based on it, I have known some basic command with Linux, Git and Github, which is also beneficial for my lessons next term. Except him I want to link some videos there to thank for another ups from bilibili: using hexo to start blog how to writing blogs","categories":[{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/categories/Life/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://andrew-rey.github.io/tags/Blog/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/tags/Life/"}],"author":"Andrew-Rey"}],"categories":[{"name":"Programming Language","slug":"Programming-Language","permalink":"https://andrew-rey.github.io/categories/Programming-Language/"},{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/categories/Project/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/categories/SE/"},{"name":"Profile","slug":"Profile","permalink":"https://andrew-rey.github.io/categories/Profile/"},{"name":"Paper","slug":"Paper","permalink":"https://andrew-rey.github.io/categories/Paper/"},{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/categories/VR/"},{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/categories/Math/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/categories/Unity3D/"},{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/categories/CS/"},{"name":"ML","slug":"ML","permalink":"https://andrew-rey.github.io/categories/ML/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/categories/Algorithm/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/categories/Life/"}],"tags":[{"name":"Racket","slug":"Racket","permalink":"https://andrew-rey.github.io/tags/Racket/"},{"name":"Functional Programming","slug":"Functional-Programming","permalink":"https://andrew-rey.github.io/tags/Functional-Programming/"},{"name":"Project","slug":"Project","permalink":"https://andrew-rey.github.io/tags/Project/"},{"name":"Unity3D","slug":"Unity3D","permalink":"https://andrew-rey.github.io/tags/Unity3D/"},{"name":"Full stack","slug":"Full-stack","permalink":"https://andrew-rey.github.io/tags/Full-stack/"},{"name":"Framework","slug":"Framework","permalink":"https://andrew-rey.github.io/tags/Framework/"},{"name":"RuoYi","slug":"RuoYi","permalink":"https://andrew-rey.github.io/tags/RuoYi/"},{"name":"welcome","slug":"welcome","permalink":"https://andrew-rey.github.io/tags/welcome/"},{"name":"clip","slug":"clip","permalink":"https://andrew-rey.github.io/tags/clip/"},{"name":"paper","slug":"paper","permalink":"https://andrew-rey.github.io/tags/paper/"},{"name":"DL","slug":"DL","permalink":"https://andrew-rey.github.io/tags/DL/"},{"name":"Multimodule","slug":"Multimodule","permalink":"https://andrew-rey.github.io/tags/Multimodule/"},{"name":"CS","slug":"CS","permalink":"https://andrew-rey.github.io/tags/CS/"},{"name":"SE","slug":"SE","permalink":"https://andrew-rey.github.io/tags/SE/"},{"name":"Java","slug":"Java","permalink":"https://andrew-rey.github.io/tags/Java/"},{"name":"Disgn Pattern","slug":"Disgn-Pattern","permalink":"https://andrew-rey.github.io/tags/Disgn-Pattern/"},{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://andrew-rey.github.io/tags/Design-Pattern/"},{"name":"Full Stack","slug":"Full-Stack","permalink":"https://andrew-rey.github.io/tags/Full-Stack/"},{"name":"Springboot","slug":"Springboot","permalink":"https://andrew-rey.github.io/tags/Springboot/"},{"name":"Vue","slug":"Vue","permalink":"https://andrew-rey.github.io/tags/Vue/"},{"name":"VR","slug":"VR","permalink":"https://andrew-rey.github.io/tags/VR/"},{"name":"HCI","slug":"HCI","permalink":"https://andrew-rey.github.io/tags/HCI/"},{"name":"Microservice","slug":"Microservice","permalink":"https://andrew-rey.github.io/tags/Microservice/"},{"name":"reverse analysis","slug":"reverse-analysis","permalink":"https://andrew-rey.github.io/tags/reverse-analysis/"},{"name":"Unity","slug":"Unity","permalink":"https://andrew-rey.github.io/tags/Unity/"},{"name":"PCG","slug":"PCG","permalink":"https://andrew-rey.github.io/tags/PCG/"},{"name":"Terrain","slug":"Terrain","permalink":"https://andrew-rey.github.io/tags/Terrain/"},{"name":"CharacterController","slug":"CharacterController","permalink":"https://andrew-rey.github.io/tags/CharacterController/"},{"name":"C++","slug":"C","permalink":"https://andrew-rey.github.io/tags/C/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://andrew-rey.github.io/tags/Deep-Learning/"},{"name":"Programming","slug":"Programming","permalink":"https://andrew-rey.github.io/tags/Programming/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://andrew-rey.github.io/tags/Algorithm/"},{"name":"Math","slug":"Math","permalink":"https://andrew-rey.github.io/tags/Math/"},{"name":"Blog","slug":"Blog","permalink":"https://andrew-rey.github.io/tags/Blog/"},{"name":"Life","slug":"Life","permalink":"https://andrew-rey.github.io/tags/Life/"}]}